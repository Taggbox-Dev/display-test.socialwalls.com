{"version":3,"file":"static/js/3298.3181cfee.chunk.js","mappings":"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","sources":["app/Themes/Badge/Elements/PopUpCard.js","app/Themes/Elements/Author/Author.js","app/Themes/Elements/Network/Network.js","app/Themes/Elements/PostContent/PostContent.js","app/Themes/Elements/PostContent/PostContentConvertion.js","app/Themes/Elements/Rating/Rating.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport Author from \"../../Elements/Author/Author\";\r\nimport PostContent from '../../Elements/PostContent/PostContent'\r\nimport Rating from \"../../Elements/Rating/Rating\";\r\nimport Network from \"../../Elements/Network/Network\";\r\nimport { PostTrimContent } from \"../../../../utils\";\r\nimport { isTagEmbed } from \"../../../../actions/api\";\r\n\r\nconst trim_content_length = !isTagEmbed ? 200 : null;\r\nconst PopUpCard = ({ itemData, personalization, ThemeRule, toggleDivs }) => {\r\n\r\n    const contentClass = (itemData.rating > 0) ? 'tb_bt_rating_content' : 'tb_bt_content'\r\n    const textDecorate = (itemData.type === 1 && personalization.textDecorate) ? 'tb_bt_text_decoration tb_bt_text_post' : '';\r\n    const postTextContent = personalization.trimcontent ? PostTrimContent(itemData.content, trim_content_length) : itemData.content\r\n\r\n    const username = itemData.author.username ? itemData.author.username.length > 0 ? `@${itemData.author.username}` : `` : '';\r\n    const authorNameStyle = { color: ThemeRule.authorColor };\r\n\r\n    const isProduct = itemData.ugc_products && itemData.ugc_products.length > 0 ? true : false\r\n    const isShopIcon = (isProduct && itemData.hotspot === 0) ? true : false\r\n    const isHotspot = itemData.hotspot && isProduct ? true : false\r\n\r\n\r\n    return <div id={`tb-bt-post-${itemData.id}`} className=\"tb_bt_post_in\" tb-network={itemData.network.id} tb-product={isShopIcon ? 1 : isHotspot ? 2 : 0}>\r\n        <div className=\"tb_bt_close_btn\" onClick={toggleDivs}>\r\n            <div className=\"tb_bt_close_ico tb__icon tb-close-circle-line\"></div>\r\n        </div>\r\n        <Author author={itemData.author} network={itemData.network} authorClass={'tb_bt_author_profile'} />\r\n        <div className=\"tb_bt_post_info\">\r\n            <div className=\"tb_bt_author_info\">\r\n                <div className=\"tb_bt_authorname\" style={authorNameStyle}>{itemData.author.name}</div>\r\n                <div className=\"tb_bt_username\" style={authorNameStyle}>{username}</div>\r\n            </div>\r\n            <div className=\"tb_bt_contant_wrapper\">\r\n                <PostContent contentClass={`${contentClass} ${textDecorate}`} item={itemData} content={postTextContent} font={ThemeRule} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} textAlign={'left'} />\r\n            </div>\r\n            <div className=\"tb_bt_post_media_wrapp\" aria-label=\"Rating\" role=\"status\">\r\n                <div className=\"tb_bt_rating__\"><Rating rating={itemData.rating} network={itemData.network} /> </div>\r\n            </div>\r\n            <div className=\"tb_bt_social_\">\r\n                <Network networkClass={'tb_bt_social_ico'} network={itemData.network} isDefault={ThemeRule.iconType === 1 ? true : false} ThemeRule={ThemeRule} />\r\n                <div className=\"tb_bt_network_name\">{itemData.network.name}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\nexport default PopUpCard","import React, {PureComponent, Suspense, lazy } from \"react\";\r\nconst AuthorAvatar = lazy(() => import('./Elements/AuthorAvatar'));\r\n\r\nexport default class Author extends PureComponent {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isAuthorImagevalid: true\r\n    }\r\n  }\r\n  render() {\r\n    const { author, authorClass, network } = this.props;\r\n\r\n    return <div key={Math.random()} className={authorClass}>\r\n      {!this.state.isAuthorImagevalid ?\r\n        <Suspense fallback={<></>}><AuthorAvatar authorClass={authorClass} username={author.name} network={network} color={network.id === null ? `#000` : network.color} errorPic={author.errorPic} /></Suspense>\r\n        :\r\n        <img className={`${authorClass}__`} src={author.picture && String(author.picture).includes('author.png') ? \" \" : author.picture.replace(/[ ]+/g, \"\")} aria-label=\"author image\" alt={author.name} width={44} height={44}\r\n          onError={(e) => {\r\n            const background = network.color == '#ffffff' ? '#000' : network.color\r\n            e.target.src = author.errorPic ? author.errorPic : `https://ui-avatars.com/api/?name=${author.name.replace(/\\s/g, '')}&background=${String(network.id === null ? `#000` : background).replace(\"#\", '')}&color=fff&length=1`\r\n            e.target.alt = author.name;\r\n            // this.setState({\r\n            //   isAuthorImagevalid: false\r\n            // })\r\n          }}\r\n        />\r\n      }\r\n    </div>\r\n  }\r\n}\r\n\r\n","import React, { PureComponent, Suspense } from \"react\";\r\nimport { isTagEmbed } from \"../../../../actions/api\";\r\nconst DefaultNetwork = React.lazy(() => import(\"./DefaultNetwork\"));\r\n\r\nexport default class Network extends PureComponent {\r\n  render() {\r\n    const { network, networkClass, isDefault } = this.props;\r\n    const isDefaultIcon = isDefault ? (network.id === 7 || network.id === 4 || network.id === 36) ? false : true : false\r\n    const icon = isTagEmbed && network.id == 36 ? \"tagembed\" : network.icon;\r\n    return (isDefaultIcon ? <div className={`${networkClass} tb__icon tb-${icon.replace(/fa-/g, \"\")}`} aria-label={`post network ${network?.name || \"\"}`}><div></div></div> : <Suspense fallback={<></>}> <DefaultNetwork network={network} networkClass={networkClass} /></Suspense>);\r\n  }\r\n}\r\n","import React, { PureComponent, Suspense } from \"react\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { STRING_TO_URL_CONVERT } from '../../../../utils'\r\nimport { isSocialEmbed, isSocialWall, isTagEmbed } from \"../../../../actions/api\";\r\nimport ContentWithOutSlack from './PostContentConvertion'\r\n//const ContentWithOutSlack = React.lazy(() => import('./PostContentConvertion'));\r\nexport default class PostContent extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.contentRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    // if (isTagEmbed) {\r\n      setTimeout(() => {\r\n        if (this.contentRef?.current?.clientHeight) {\r\n          const contentHeight = this.contentRef?.current?.clientHeight || 0;\r\n          if (this.props.contentRefCallBack) this.props.contentRefCallBack(contentHeight)\r\n        }\r\n      }, 100);\r\n    // }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { contentClass, content, ThemeRule, font, personalization, item, contentTitle, readMore, maxLength, textAlign, maxLines, isReadMore } = this.props;\r\n    //const { expanded } = this.state\r\n    const truncateStyle = {\r\n      WebkitLineClamp: maxLines,\r\n      textAlign: ThemeRule.textAlignment\r\n    };\r\n    let contentData = item.network.id == 20 ? content : (isSocialWall && !isSocialEmbed) ? content : STRING_TO_URL_CONVERT(content);\r\n    if (item.network.id == 12) contentData = ReactHtmlParser(contentData); // for RRS but we have to change from backend.\r\n    const trimClasses = `${ThemeRule.lineTrim ? ` tb_content_line-${ThemeRule.lineTrim}` : ``}`\r\n    const contentClasses = `${contentClass} ${!isReadMore ? trimClasses : ''} tb-cTBfont-${ThemeRule.font_varient}`\r\n    return (\r\n      <div className={contentClasses} ref={this.contentRef} style={truncateStyle}>\r\n        {contentTitle ? <div className=\"tb_bold_txt__\">{ReactHtmlParser(contentTitle)}</div> : null}\r\n        <Suspense fallback={<></>}> <ContentWithOutSlack data={item} content={contentData} Personalization={personalization} ThemeRule={ThemeRule} /> </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { memo } from \"react\";\r\nimport Emojify from 'react-emojione';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nconst reactStringReplace = require(\"react-string-replace\");\r\n//import { PostTrimContent } from \"../../../../actions/themeActions\";\r\nconst convertSlackEmoji = (data, ThemeRule) => {\r\n    return <Emojify style={ThemeRule && [66, 70].includes(ThemeRule?.themeId) ? { width: (ThemeRule.fontSize), height: (ThemeRule.fontSize) } : null}>{ReactHtmlParser(data)}</Emojify>\r\n}\r\nconst ContentWithOutSlack = ({ data, content, Personalization, ThemeRule }) => {\r\n    const customHasTagStyle = {\r\n        color: Personalization.hashtag_color,\r\n        fontWeight: \"bold\",\r\n        backgroundColor: Personalization.hashtag_background_status == 1 ? Personalization.hashtag_background_color : 'transparent'\r\n    }\r\n\r\n    return data.network.id == 20 && window.slackdown ? <>\r\n        {Personalization.hashtag_highlight === 1 &&\r\n            Personalization.hashtag_feed === 0 &&\r\n            Personalization.hashtag_all === 0\r\n            ? ReactHtmlParser(content)\r\n            : Personalization.hashtag_highlight === 1 &&\r\n                Personalization.hashtag_feed === 0 &&\r\n                Personalization.hashtag_all === 1\r\n                ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\r\n                    content,\r\n                    /#(\\w+)/g,\r\n                    (match, i) => (\r\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                            #{match}\r\n                        </div>\r\n                    )\r\n                ), data.slackMember), ThemeRule)\r\n                : Personalization.hashtag_highlight === 1 &&\r\n                    Personalization.hashtag_feed === 1 &&\r\n                    Personalization.hashtag_all === 0\r\n                    ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\r\n                        content,\r\n                        data.hash.hashString,\r\n                        (match, i) => (\r\n                            <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                {match}\r\n                            </div>\r\n                        )\r\n                    ), data.slackMember), ThemeRule)\r\n                    : Personalization.hashtag_highlight === 1 &&\r\n                        Personalization.hashtag_feed === 1 &&\r\n                        Personalization.hashtag_all === 1\r\n                        ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\r\n                            content,\r\n                            /#(\\w+)/g,\r\n                            (match, i) => (\r\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                    #{match}\r\n                                </div>\r\n                            )\r\n                        ), data.slackMember), ThemeRule)\r\n                        : convertSlackEmoji(window.slackdown.parse(content, data.slackMember), ThemeRule)}\r\n    </> : <>\r\n\r\n        {Personalization.hashtag_highlight === 1 &&\r\n            Personalization.hashtag_feed === 0 &&\r\n            Personalization.hashtag_all === 0\r\n            ? ReactHtmlParser(content)\r\n            : Personalization.hashtag_highlight === 1 &&\r\n                Personalization.hashtag_feed === 0 &&\r\n                Personalization.hashtag_all === 1\r\n                ? reactStringReplace(\r\n                    ReactHtmlParser(content),\r\n                    /#(\\w+)/g,\r\n                    (match, i) => (\r\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                            #{match}\r\n                        </div>\r\n                    )\r\n                )\r\n                : Personalization.hashtag_highlight === 1 &&\r\n                    Personalization.hashtag_feed === 1 &&\r\n                    Personalization.hashtag_all === 0\r\n                    ? reactStringReplace(\r\n                        ReactHtmlParser(content),\r\n                        data.hash.hashString,\r\n                        (match, i) => (\r\n                            <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                {match}\r\n                            </strong>\r\n                        )\r\n                    )\r\n                    : Personalization.hashtag_highlight === 1 &&\r\n                        Personalization.hashtag_feed === 1 &&\r\n                        Personalization.hashtag_all === 1\r\n                        ? reactStringReplace(\r\n                            ReactHtmlParser(content),\r\n                            /#(\\w+)/g,\r\n                            (match, i) => (\r\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                    #{match}\r\n                                </div>\r\n                            )\r\n                        )\r\n                        : convertSlackEmoji(content, ThemeRule)}\r\n    </>\r\n}\r\n\r\nexport default memo(ContentWithOutSlack);","import React, { PureComponent } from \"react\";\r\nimport { isTagEmbed } from \"../../../../actions/api\";\r\n\r\nconst NetworkStar = ({ network }) => {\r\n    const networkStyles = {\r\n        3: { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#1b74e4' },\r\n        19: { className: 'tb_rating_ico__ tb__icon tb-yelp-star', color: '#e00707' },\r\n        23: { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#ff385c' },\r\n        28: isTagEmbed ? { className: 'tb_rating_ico__ tb__icon tb-star', color: '#F8B90C' } : { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#F8B90C' },\r\n        29: isTagEmbed ? { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#000' } : { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#613983' },\r\n        33: { className: 'tb_rating_ico__ tb__icon tb-trustpilot', color: '#000' },\r\n        35: { className: 'tb_rating_ico__ tb__icon tb-star-fill', color: '#34E0A1' },\r\n    };\r\n\r\n    const { className, color } = networkStyles[network.id] || {\r\n        className: 'tb_rating_ico__ tb__icon tb-default-star',\r\n        color: '#F8B90C',\r\n    };\r\n\r\n    return <div className={className} style={{ color }} tb-network={network.id}><div></div></div>;\r\n};\r\n\r\nconst ThemeStar = ({ ThemeID }) => {\r\n    const themeStyles = {\r\n        59: { className: 'tb_rating_ico__ tb__icon tb-star-fill', color: '#34E0A1' },\r\n    };\r\n\r\n    const { className, color } = themeStyles[ThemeID] || {\r\n        className: 'tb_rating_ico__ tb__icon tb-star-alt',\r\n        color: '#F8B90C',\r\n    };\r\n\r\n    return <div className={className} style={{ color }} tb-network={ThemeID}></div>;\r\n};\r\nexport default class Rating extends PureComponent {\r\n    render() {\r\n        const { rating, network, ThemeID } = this.props;\r\n        return (\r\n            <div className=\"tb__rating__\" aria-hidden>\r\n                {\r\n                    rating ? [...Array(rating)].map((el, index) => ThemeID ? <ThemeStar key={index} ThemeID={ThemeID} /> : <NetworkStar key={index} network={network} /> ) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"names":["trim_content_length","isTagEmbed","_ref","itemData","personalization","ThemeRule","toggleDivs","contentClass","rating","textDecorate","type","postTextContent","trimcontent","PostTrimContent","content","username","author","length","concat","authorNameStyle","color","authorColor","isProduct","ugc_products","isShopIcon","hotspot","isHotspot","_jsxs","id","className","network","children","_jsx","onClick","Author","authorClass","style","name","PostContent","item","font","contentTitle","textAlign","role","Rating","Network","networkClass","isDefault","iconType","AuthorAvatar","lazy","PureComponent","constructor","props","super","this","state","isAuthorImagevalid","render","src","picture","String","includes","replace","alt","width","height","onError","e","background","target","errorPic","Suspense","fallback","_Fragment","Math","random","DefaultNetwork","React","isDefaultIcon","icon","contentRef","componentDidMount","setTimeout","_this$contentRef","_this$contentRef$curr","current","clientHeight","_this$contentRef2","_this$contentRef2$cur","contentHeight","contentRefCallBack","readMore","maxLength","maxLines","isReadMore","truncateStyle","WebkitLineClamp","textAlignment","contentData","isSocialWall","isSocialEmbed","STRING_TO_URL_CONVERT","ReactHtmlParser","trimClasses","lineTrim","contentClasses","font_varient","ref","ContentWithOutSlack","data","Personalization","reactStringReplace","require","convertSlackEmoji","Emojify","themeId","fontSize","customHasTagStyle","hashtag_color","fontWeight","backgroundColor","hashtag_background_status","hashtag_background_color","window","slackdown","hashtag_highlight","hashtag_feed","hashtag_all","parse","match","i","slackMember","hash","hashString","memo","NetworkStar","networkStyles","ThemeStar","_ref2","ThemeID","Array","map","el","index"],"sourceRoot":""}