{"version":3,"file":"static/js/4491.16beef3d.chunk.js","mappings":"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","sources":["app/Themes/Grid/Pixel/Elements/Card.js","app/Themes/Grid/Pixel/index.js","app/Themes/Elements/ShareOnHover/ShareOnHover.js"],"sourcesContent":["import React, { Suspense, useRef, useEffect } from \"react\";\nimport { IS_THEME, PostTrimContent, themeImpressionTracking } from '../../../../../utils'\nimport { isSocialWall, isTagEmbed, isTagShop, isTagbox, isEmbed } from \"../../../../../actions/api\";\nimport { suiteTrack } from '../../../../../actions/api'\nimport ShareOnHover from \"../../../Elements/ShareOnHover/ShareOnHover\";\nconst AuthorDetails = React.lazy(() => import(\"./AuthorDetails\"));\nconst Media = React.lazy(() => import('./Media'));\nconst PostContent = React.lazy(() => import('../../../Elements/PostContent/PostContent'));\nconst trim_content_length = !isTagEmbed ? 200 : null;\n\n\nconst Card = ({ itemData, personalization, adjustWidth, ThemeRule, clickToShowPopUp, itemIndex, wallID, ownerId, postSizeInPx, wall, onClickPopUpSlider }) => {\n  const postTrack = useRef(null);\n  const mediaType = (itemData.type === 2 || itemData.type === 3 || itemData.type === 4 || itemData.type === 5) ? true : false;\n  const postTextContent = personalization.trimcontent ? PostTrimContent(itemData.content, trim_content_length) : itemData.content\n  const responsiveCardSize2x = postSizeInPx.adjustWidth < 250 ? true : false\n  const themeMode = (ThemeRule.postHover == 0 && isTagShop) ? 'light' : 'dark'\n  const overlay = isTagbox ? 'tb_g_p_color_overlay' : 'tb_g_p_post_overlay-' + themeMode\n  const overlayStyle = { backgroundColor: isTagbox ? ThemeRule.backgroundColor : '' }\n  useEffect(() => {\n    if (suiteTrack) themeImpressionTracking(postTrack);\n  }, []);\n  const isHotspot = itemData.hotspot && itemData.ugc_products.length > 0 ? true : false\n  const isShopBtn = isTagShop && (!itemData.hotspot && itemData.ugc_products.length > 0) ? true : false;\n\n\n\n  useEffect(() => {\n    if (itemData.isPopUp) onClickPopUpSlider(itemIndex, itemData)\n  }, [itemIndex, itemData.isPopUp, itemData]);\n  return <div id={`tb-sp-post-${itemData.id}`} className={`tb_g_p_post_wrapper${responsiveCardSize2x ? ' tb_g_p_post_wrapper2x' : ''}`} style={{ width: `${adjustWidth}%`, padding: personalization.padding / 2 }} tb-network={itemData.network.id} tb-product={isShopBtn ? 1 : isHotspot ? 2 : 0} tabIndex=\"0\" role=\"article\" aria-label={`Post ${parseInt(itemIndex) + 1},${postTextContent}`} ref={postTrack} post-id={itemData.referenceId ? itemData.referenceId : itemData.id} feed-id={itemData.feedId}>\n    <div className={`tb_g_p_post_in`} onClick={clickToShowPopUp(itemIndex, itemData)}>\n      <div className=\"tb_g_p_post_media_wrapp\">\n        {itemData.share.status ? <ShareOnHover share={itemData.share} shareClass={'tb_g_p_share_container'} item={itemData} wallID={wallID} ownerId={ownerId} /> : ''}\n        {mediaType ? <Suspense fallback={<></>}><Media key={`img${itemIndex}_${itemData.id}`} itemData={itemData} wallID={wallID} ownerId={ownerId} ThemeID={personalization.widgetTheme} wall={wall} /></Suspense> : ''}\n        {isEmbed ? <>\n          <div className=\"tb_g_p_post_details\">\n            <div className=\"tb_g_p_contant_wrapper\">\n              {((!ThemeRule.hideContent || itemData.type == 1)) ? <Suspense fallback={<></>}><PostContent contentClass={'tb_g_p_content'} item={itemData} content={postTextContent} font={ThemeRule} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} /></Suspense> : ''}\n            </div>\n            <Suspense fallback={<></>}><AuthorDetails ownerId={ownerId} postTime={itemData.createdAt} author={itemData.author} network={itemData.network} font={ThemeRule} personalization={personalization} ThemeRule={ThemeRule} /></Suspense>\n          </div>\n          <div className={`tb_g_p_post_overlay ${overlay}`} style={overlayStyle}><div></div></div>\n        </> : null}\n      </div>\n    </div>\n  </div>\n}\nexport default Card","import React, { Component, memo } from \"react\";\nimport Card from \"./Elements/Card\";\nimport { connect } from 'react-redux';\nimport { isSocialEmbed } from \"../../../../actions/api\";\nimport { managePostHeight } from '../../../../actions/themeActions';\nimport \"./scss/GridPixel.scss\";\nclass GPixel extends Component {\n  state = {\n    modifiedData: [],\n    currentIndex: 0,\n    replaceId: 0\n  }\n  componentDidMount() {\n    this.onLoadData()\n  }\n  onLoadData = () => {\n    const { postData, wall, heightUpdate } = this.props;\n    if (isSocialEmbed) this.setState({ modifiedData: postData, currentIndex: 0 });\n    else {\n      var modifiedData = []\n      postData.map((item, index) => {\n        if (index < wall.ThemeRule.numberOfCoumn) modifiedData.push(item)\n      });\n      this.setState({ modifiedData, currentIndex: parseInt(wall.ThemeRule.numberOfCoumn) - 1 }, () => this.onFlipPost());\n    }\n\n    setTimeout(() => heightUpdate(), 1000)\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.props.postData !== nextProps.postData) {\n      this.onLoadData()\n    }\n  }\n\n  onFlipPost = () => {\n    const { wall } = this.props;\n    setTimeout(() => {\n      const { postData, wall } = this.props;\n      const { currentIndex, replaceId, modifiedData } = this.state;\n      let newCurrentIndex = currentIndex + 1;\n      if (newCurrentIndex >= postData.length) {\n        newCurrentIndex = 0;\n      }\n      modifiedData[replaceId] = postData[newCurrentIndex];\n      let newReplaceId = replaceId + 1\n      if (newReplaceId > parseInt(wall.ThemeRule.numberOfCoumn)) newReplaceId = 0\n      this.setState({ modifiedData, currentIndex: newCurrentIndex, replaceId: newReplaceId }, () => this.onFlipPost());\n    }, (wall.ThemeRule.slideDelay * 1000))\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.postData !== this.props.postData) return true\n    else if (prevState.currentIndex !== this.state.currentIndex) return true\n    else if (prevState.replaceId !== this.state.replaceId) return true\n    else return false\n  }\n\n  render() {\n    const { postData, completeDataObject, adjustWidth, wall, clickToShowPopUp, cardNumber, onClickToCTA, postSizeInPx, onClickPopUpSlider } = this.props;\n    const { modifiedData } = this.state;\n    let rowCount = !wall.ThemeRule.multiRow || wall.ThemeRule.multiRow === 0 ? 1 : wall.ThemeRule.multiRow;\n    return (\n      <div tabIndex=\"0\" aria-label={`There are ${(postData && postData.length > 0) ? postData.length : 0} posts in the feed`} role=\"feed\" className=\"tb_g_p_post_container\">\n        {(modifiedData && modifiedData.length > 0) && modifiedData.map((item, index) => {\n          const cardData = completeDataObject[item];\n          return <Card ownerId={wall.Wall.owner} itemData={cardData} key={`sqr_crd_${index}_${item.id}`} itemIndex={index} adjustWidth={adjustWidth} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} wall={wall} onClickPopUpSlider={onClickPopUpSlider} />\n        })}\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    postHeight: state.postHeight.data\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    managePostHeight: (data) => dispatch(managePostHeight(data))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(GPixel))","import React, { PureComponent } from \"react\";\nimport { themePostTracking, gtmAnalyticsAction } from '../../../../actions/themeActions'\nimport { isTagEmbed } from '../../../../actions/api'\n\nexport default class ShareOnHover extends PureComponent {\n\n\n  onClickData = (shareURL) => event => {\n    const { item, wallID, ownerId } = this.props;\n    event.stopPropagation();\n    if (!isTagEmbed) themePostTracking({\n      type: 2,\n      action: 2,\n      wall: wallID,\n      feed: item.feedId,\n      post: item.referenceId ? item.referenceId : item.id,\n      owner: ownerId\n    })\n    gtmAnalyticsAction(\"Tagbox\", \"shareUrl\", \"shareUrl\", shareURL)\n    window.open(shareURL, \"_blank\")\n  }\n\n  render() {\n    const { share, shareClass } = this.props;\n    return <div className={`tb_share_wrapper ${shareClass}`}>\n      <div className={`tb_share_button_ tb__icon ${isTagEmbed ? 'tb-share-fill' : 'tb-share'}`}><div></div></div>\n      <div className=\"tb_share_icon_list_wrap\">\n        {share.facebook ?\n          <div className=\"tb_share_icon_list\">\n            <div onClick={this.onClickData(share.facebook)} className=\"tb_share_ico__ tb__icon tb-facebook\" title=\"facebook\"><div></div></div>\n          </div>\n          : ''}\n        {share.twitter ?\n          <div className=\"tb_share_icon_list\">\n            <div onClick={this.onClickData(share.twitter)} className=\"tb_share_ico__  tb__icon tb-twitter\" title=\"twitter\"><div></div></div>\n          </div>\n          : ''}\n        {share.linkedin ?\n          <div className=\"tb_share_icon_list\">\n            <div onClick={this.onClickData(share.linkedin)} className=\"tb_share_ico__ tb__icon tb-linkedin\" title=\"linkedin\"><div></div></div>\n          </div>\n          : ''}\n      </div>\n    </div>\n  }\n}\n"],"names":["AuthorDetails","React","Media","PostContent","trim_content_length","isTagEmbed","_ref","itemData","personalization","adjustWidth","ThemeRule","clickToShowPopUp","itemIndex","wallID","ownerId","postSizeInPx","wall","onClickPopUpSlider","postTrack","useRef","mediaType","type","postTextContent","trimcontent","PostTrimContent","content","responsiveCardSize2x","themeMode","postHover","isTagShop","overlay","isTagbox","overlayStyle","backgroundColor","useEffect","suiteTrack","themeImpressionTracking","isHotspot","hotspot","ugc_products","length","isShopBtn","isPopUp","_jsx","id","concat","className","style","width","padding","network","tabIndex","role","parseInt","ref","referenceId","feedId","children","onClick","_jsxs","share","status","ShareOnHover","shareClass","item","Suspense","fallback","_Fragment","ThemeID","widgetTheme","isEmbed","hideContent","contentClass","font","contentTitle","postTime","createdAt","author","GPixel","Component","constructor","arguments","state","modifiedData","currentIndex","replaceId","onLoadData","postData","heightUpdate","this","props","isSocialEmbed","setState","map","index","numberOfCoumn","push","onFlipPost","setTimeout","newCurrentIndex","newReplaceId","slideDelay","componentDidMount","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","prevState","render","completeDataObject","cardNumber","onClickToCTA","multiRow","cardData","Card","Wall","owner","Personalization","connect","postHeight","data","dispatch","managePostHeight","memo","PureComponent","onClickData","shareURL","event","stopPropagation","themePostTracking","action","feed","post","gtmAnalyticsAction","window","open","facebook","title","twitter","linkedin"],"sourceRoot":""}