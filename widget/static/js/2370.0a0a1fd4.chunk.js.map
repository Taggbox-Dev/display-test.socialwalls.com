{"version":3,"file":"static/js/2370.0a0a1fd4.chunk.js","mappings":"2LAIA,MAAMA,UAAsBC,EAAAA,UACxBC,WAAAA,CAAYC,GACRC,MAAMD,GAAO,KAejBE,aAAe,KAAI,KACnBC,WAAa,KACT,MAAM,cAAEC,GAAkBC,KAAKL,MAC/B,IAAIM,EAAWF,EACXG,EAAeC,OAAOC,KAAKH,GAAUI,IAAIC,GAAWL,EAASK,IACjEN,KAAKO,SAAS,CAAEN,WAAUC,eAAcM,UAAWC,KAAKC,MAAMC,KAAKC,MAAQ,KAAOC,YAAY,GAAS,IAAMb,KAAKc,iBACrH,KAEDA,aAAe,KACPd,KAAKH,cAAckB,cAAcf,KAAKH,cAC1C,MAAM,aAAEK,EAAY,SAAED,GAAaD,KAAKgB,MACpB,MAAhBd,GAAoC,MAAZD,IAAkBD,KAAKH,cAAeoB,EAAAA,EAAAA,IAAoB,IAAMjB,KAAKF,aAAc,OAzB/GE,KAAKgB,MAAQ,CACTf,SAAU,KACVC,aAAc,KACdM,UAAWC,KAAKC,MAAMC,KAAKC,MAAQ,KACnCC,YAAY,EACZK,YAAaC,OAAOC,WACpBC,aAAcF,OAAOG,YAE7B,CAEAC,iBAAAA,GACIvB,KAAKF,YACT,CAgBA0B,MAAAA,GACI,MAAM,aAAEtB,EAAY,UAAEM,EAAS,WAAEK,EAAU,aAAEQ,EAAY,YAAEH,GAAgBlB,KAAKgB,MAC1ES,EAAYP,EAAcG,IAAiBA,EAAe,KAAO,IAAIK,YAAeL,EAAe,EAAK,KAAO,IAAIK,UACzH,OAAOC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACc,OAAjB3B,EAAwBA,EAAaG,IAAI,CAACyB,EAAMC,KAC5C,MAAM,WAAEC,EAAU,aAAEnC,EAAY,SAAEoC,IAAaC,EAAAA,EAAAA,IAAmB1B,EAAWsB,EAAKK,OAAQL,EAAKM,MAAON,EAAKO,MAAON,GAElH,IACqB,IAAfC,GAAsBA,GAAc,GAAKA,EAAa,MAAsB,GAAZC,GAAmBzB,GAAaX,GAAgBW,GAAayB,GAAY,CAC3I,IAAIK,EAAS,GAAAC,OAAMT,EAAKQ,WACpBR,EAAKQ,UAAUE,SAASC,EAAAA,MAAeH,EAAYR,EAAKQ,WAC5D,MAAMI,GAAe7B,GAAgC,IAAlBiB,EAAKQ,UAClCK,KAAYD,GAA6B,GAAbZ,EAAKc,MAA0B,GAAbd,EAAKc,MACzD,IAAIC,EAAcF,EAAYlB,EAAwB,EAAZA,EAC1C,OAAOqB,EAAAA,EAAAA,MAAA,OAAiBC,GAAG,iBAAiBC,UAAU,eAAcnB,SAAA,EAChEF,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,cAAcC,MAAO,CAAEC,gBAAgB,OAADX,OAASD,EAAS,SACvEX,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,UAASnB,UACpBiB,EAAAA,EAAAA,MAAA,OAAKE,UAAS,eAAAT,OAAiBI,EAAW,iBAAmB,iBAAkBd,SAAA,CAC1Ea,GACGf,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,YAAWnB,UACtBF,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,UAAUG,IAAKb,EAAWc,QAASA,IAAMpD,KAAKO,SAAS,CAAEM,YAAY,IAEpFwC,IAAI,OAEN,KACU,IAAdvB,EAAKc,MAA4B,IAAdd,EAAKc,MACtBjB,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,kBAAkBM,IAAKtD,KAAKuD,WAAW1B,UAClDF,EAAAA,EAAAA,KAAA,OAAKqB,UAAU,gBAAenB,UAC1BF,EAAAA,EAAAA,KAAA,OAAKqB,UAAS,0BAAAT,OAA4BM,GAAahB,SAAEC,EAAK0B,kBAGpE,YAjBDzB,EAqBrB,CACK,OAAO,OACX,MAEb,EAGJ,SAAe0B,EAAAA,EAAAA,MAAKjE,E","sources":["app/Components/Announcements/index.js"],"sourcesContent":["import React, { Component, memo } from 'react';\nimport { setIntervalFunction, announcementsUtils } from '../../../utils'\nimport { CloudHostUrl } from '../../../constants';\nimport './scss/announcements.scss'\nclass Announcements extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            anmtData: null,\n            anmtDataKeys: null,\n            timeStamp: Math.floor(Date.now() / 1000),\n            imageError: false,\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight,\n        };\n    }\n\n    componentDidMount() {\n        this.onLoadAnmt()\n    }\n\n    timeInterval = null\n    onLoadAnmt = () => {\n        const { announcements } = this.props;\n        let anmtData = announcements;\n        let anmtDataKeys = Object.keys(anmtData).map(itemKey => anmtData[itemKey])\n        this.setState({ anmtData, anmtDataKeys, timeStamp: Math.floor(Date.now() / 1000), imageError: false }, () => this.AnmtInterval())\n    }\n\n    AnmtInterval = () => {\n        if (this.timeInterval) clearInterval(this.timeInterval)\n        const { anmtDataKeys, anmtData } = this.state;\n        if (anmtDataKeys != null && anmtData != null) this.timeInterval = setIntervalFunction(() => this.onLoadAnmt(), 10000)\n    }\n\n    render() {\n        const { anmtDataKeys, timeStamp, imageError, windowHeight, windowWidth } = this.state;\n        const lineClamp = windowWidth > windowHeight ? ((windowHeight - 400) / 50).toFixed() : (((windowHeight / 2) - 200) / 50).toFixed()\n        return <>{\n            anmtDataKeys !== null ? anmtDataKeys.map((item, index) => {\n                const { repeatOnce, timeInterval, aEndTime } = announcementsUtils(timeStamp, item.showAt, item.endAt, item.every, index);\n                // if ((((repeatOnce === 0) || (repeatOnce < 10 && repeatOnce >= 0)) && (timeStamp >= timeInterval)) && timeStamp >= aEndTime) \n                if (\n                    ((repeatOnce === 0) || (repeatOnce >= 0 && repeatOnce < 10)) && ((aEndTime == 0) || (timeStamp >= timeInterval && timeStamp <= aEndTime))) {\n                    let mediaFile = `${item.mediaFile}`;\n                    if (item.mediaFile.includes(CloudHostUrl)) mediaFile = item.mediaFile;\n                    const isMediaFile = !imageError && item.mediaFile != \"\" ? true : false;\n                    const onlyMedia = isMediaFile && (item.type != 1 || item.type != 4) ? true : false\n                    var lineClamp_ =  onlyMedia ? lineClamp : lineClamp * 2\n                    return <div key={index} id='announcement__' className='an_container'>\n                        <div className=\"an_overlay_\" style={{ backgroundImage: `url(${mediaFile})` }}></div>\n                        <div className=\"an_wrap\">\n                            <div className={`an_wrap_row ${onlyMedia? ' an_only_media' : ' an_only_text'}`}>\n                                {isMediaFile ?\n                                    <div className=\"an_media_\">\n                                        <img className=\"an_img_\" src={mediaFile} onError={() => this.setState({ imageError: true })}\n                                        //  height={800} width={1000} \n                                        alt=\"\" />\n                                    </div>\n                                    : null}\n                                {(item.type === 1 || item.type === 4) ?\n                                    <div className=\"an_content_wrap\" ref={this.contentRef}>\n                                        <div className=\"an_content_in\">\n                                            <div className={`an_content an_con_line-${lineClamp_}`}>{item.description}</div>\n                                        </div>\n                                    </div>\n                                    : null}\n                            </div>\n                        </div>\n                    </div>\n                }\n                else return null;\n            }) : null}\n        </>\n    }\n}\n\nexport default memo(Announcements)"],"names":["Announcements","Component","constructor","props","super","timeInterval","onLoadAnmt","announcements","this","anmtData","anmtDataKeys","Object","keys","map","itemKey","setState","timeStamp","Math","floor","Date","now","imageError","AnmtInterval","clearInterval","state","setIntervalFunction","windowWidth","window","innerWidth","windowHeight","innerHeight","componentDidMount","render","lineClamp","toFixed","_jsx","_Fragment","children","item","index","repeatOnce","aEndTime","announcementsUtils","showAt","endAt","every","mediaFile","concat","includes","CloudHostUrl","isMediaFile","onlyMedia","type","lineClamp_","_jsxs","id","className","style","backgroundImage","src","onError","alt","ref","contentRef","description","memo"],"sourceRoot":""}