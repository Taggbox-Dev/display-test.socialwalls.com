{"version":3,"file":"static/js/9575.09405198.chunk.js","mappings":"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","sources":["app/Components/UserComponents/ReviewHub/Components/uppyUpload.js","app/Components/UserComponents/ReviewHub/Components/Uploads.js"],"sourcesContent":["import Uppy from '@uppy/core';\r\nimport Transloadit from '@uppy/transloadit';\r\nimport { suiteTrack, isTagShop } from '../../../../../actions/api';\r\n\r\nconst uppyKey = '0701d3d7f8d94e92a65a9cba388b1d96';\r\nconst uppyBucket = isTagShop ? 'cloud.tagshop.ai' : 'cloud.tagbox.com';\r\nconst uppyAwsKey = '47ABVORKG52UYE1KB28S';\r\nconst uppyAwsSecret = 'pcaTfeokaz28geAAns08H3yaGbOVz6ILgTptu19v';\r\n\r\n\r\n\r\n\r\nclass UppyUpload {\r\n    constructor(beforeFileAdded, beforeUpload, limit) {\r\n        let uploadPath = 'media/tmpimages/';\r\n        let bucket = uppyBucket;\r\n        if (suiteTrack) {\r\n            uploadPath = `ugc-suite/tmp/`;\r\n            bucket = 'cloud.tagbox.com';\r\n        }\r\n        if (isTagShop) {\r\n            uploadPath = `tmp/`;\r\n        }\r\n        this.uppy = new Uppy({\r\n            meta: { type: 'avatar' },\r\n            autoProceed: true,\r\n            debug: true,\r\n            allowMultipleUploads: true,\r\n            restrictions: {\r\n                maxFileSize: 104857600,\r\n                maxNumberOfFiles: limit ? limit : 1,\r\n                minNumberOfFiles: 1,\r\n                allowedFileTypes: ['image/*', 'video/*']\r\n            },\r\n            onBeforeFileAdded: beforeFileAdded,\r\n            onBeforeUpload: beforeUpload\r\n        })\r\n\r\n        this.uppy.use(Transloadit, {\r\n            params: {\r\n                auth: {\r\n                    key: uppyKey\r\n                },\r\n                steps: {\r\n                    store: {\r\n                        robot: '/wasabi/store',\r\n                        bucket_region: \"us-west-1\",\r\n                        result: true,\r\n                        bucket: bucket,\r\n                        key: uppyAwsKey,\r\n                        secret: uppyAwsSecret,\r\n                        path: uploadPath + '${file.id}.${file.ext}'\r\n                    }\r\n                }\r\n            },\r\n            waitForEncoding: true\r\n            // }).use(Compressor, {\r\n            //     quality: 0.8\r\n        });\r\n    }\r\n}\r\n\r\nexport default UppyUpload;","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport { DragDrop, StatusBar, FileInput, Dashboard } from '@uppy/react';\r\nimport '@uppy/core/dist/style.css'\r\nimport UppyUpload from './uppyUpload'\r\nimport { suiteTrack, VIDEO_COMPRESS, isTagShop } from '../../../../../actions/api'\r\nimport { bytesToSize, tb_onsite_btn_disabled } from '../../../../../utils'\r\nimport { CloudHostUrl } from '../../../../../constants'\r\nimport _ from \"lodash\";\r\n\r\n\r\nexport const Loader = ({ value, isBar }) => {\r\n    const progress = Math.round(3.14 * (78 / 2 - 10) * 2 * ((100 - value) / 100));\r\n    return isBar ?\r\n        <div className='t_m_pb_wrap'>\r\n            <div className='t_m_pb' style={{ width: `${value}%` }}><div></div></div>\r\n        </div>\r\n        :\r\n        <div className='t_m_propgress'>\r\n            <svg width=\"78\" height=\"78\" viewBox=\"-10 -10 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style={{ transform: 'rotate(-90deg)' }}>\r\n                <circle r=\"30\" cx=\"40\" cy=\"40\" fill=\"transparent\" stroke=\"#D9D9D9\" strokeWidth=\"4\" strokeDasharray=\"188.4px\" strokeDashoffset=\"0\"></circle>\r\n                <circle id='path_fr_circle' r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#545454\" strokeWidth=\"4\" strokeLinecap=\"butt\" strokeDashoffset={`${progress}px`} fill=\"transparent\" strokeDasharray=\"188.4px\"></circle>\r\n                <text x=\"25px\" y=\"47px\" fill=\"#545454\" fontSize=\"14px\" style={{ transform: 'rotate(90deg) translate(17px, -84px)' }} textAnchor=\"middle\" dominantBaseline=\"middle\">{value}%</text>\r\n            </svg>\r\n        </div>\r\n}\r\n\r\nlet videoFiles = []\r\nlet totalFiles = []\r\nclass Uploads extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        selectedFile: null,\r\n        selectedUrl: null,\r\n        type: null,\r\n        thumb_file: [],\r\n        fileSize: false,\r\n        filemaxSize: 0,\r\n        throwError: false,\r\n        videoPath: \"\",\r\n        fileSizeText: \"\",\r\n        ext: null, size: 0,\r\n        fileName: null,\r\n        mediaHeight: 0,\r\n        mediaWidth: 0,\r\n        uploadPercent: 0,\r\n        limit: 20,\r\n        uploadedFiles: []\r\n    }\r\n    beforeFileAdded = (currentFile, files) => {\r\n        if(totalFiles.length > 0) {\r\n            const exists = totalFiles.find(file => file.id == currentFile.id)\r\n            if(exists) return false\r\n        }\r\n        tb_onsite_btn_disabled(1)\r\n        const { size, sizeText } = bytesToSize(currentFile.size);\r\n        if (['GB', 'TB'].includes(sizeText)) {\r\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\r\n            this.setState({ type: fileType, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\r\n                this.onLoadError(fileType)\r\n                setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\" }), 2000)\r\n            })\r\n            tb_onsite_btn_disabled(2)\r\n\r\n        }\r\n        else if (sizeText == \"MB\" ) {\r\n\r\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\r\n            const maxuploadSize = fileType == 4 ? 15 : 100;\r\n\r\n            if (size >= maxuploadSize) {\r\n\r\n                this.setState({ type: fileType, filemaxSize: maxuploadSize, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\r\n                    this.onLoadError(fileType)\r\n                    setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\", type: null }, () => this.onLoadError(fileType)), 5000)\r\n                })\r\n                tb_onsite_btn_disabled(2)\r\n\r\n                return false\r\n            }\r\n            else if (fileType == 5){\r\n                \r\n                if(totalFiles.length <20){\r\n                    videoFiles.push(currentFile)\r\n                    totalFiles.push(currentFile)\r\n                }\r\n                \r\n            }\r\n            else {\r\n                if(totalFiles.length <20){\r\n                    totalFiles.push(currentFile)\r\n                }\r\n                //return true\r\n            }\r\n        }\r\n        else if(sizeText == 'KB' && currentFile.meta.type.includes('image') && totalFiles.length<20){\r\n            totalFiles.push(currentFile)\r\n            //return true\r\n        }\r\n    }\r\n\r\n    beforeUpload = (files) => {\r\n        for (const file of totalFiles) {\r\n            if (file.meta.type.includes('video')) {\r\n            this.videoProcess()\r\n              break;\r\n            }\r\n        }\r\n\r\n        this.setState({ isLoading: true })\r\n        return Object.fromEntries(\r\n            Object.entries(files).filter(([fileId, file]) => !file.meta.type.includes('video'))\r\n        );\r\n    }\r\n\r\n    videoProcess = () => {\r\n        if(videoFiles.length > 0 && totalFiles.length<=20) {\r\n            try {\r\n                const { onsite_token } = this.props;\r\n                this.setState({isLoading:true})\r\n                const updateFiles = videoFiles[0];\r\n                const data = new FormData();\r\n                data.append(\"file\", updateFiles.data);\r\n                data.append(\"onsite_token\", onsite_token);\r\n                const config = {\r\n                    headers: { productdomain: `taggbox.com` },\r\n                    onUploadProgress: (progressEvent) => {\r\n                        const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                        this.setState({\r\n                            uploadPercent: percent, isLoading:true\r\n                        })\r\n                        \r\n                        // Update Uppy progress manually\r\n                        \r\n                    }\r\n                };\r\n                axios.post(VIDEO_COMPRESS, data, config).then((response) => {\r\n                    const { responseData } = response.data;\r\n                    if (responseData && responseData.length > 0) {\r\n                        this.setState(prevState => ({\r\n                            videoPath: responseData[0].sscode,\r\n                            isLoading: false,\r\n                            type: 5,\r\n                            selectedFile: responseData[0].s3Url,\r\n                            selectedUrl: responseData[0].s3Url,\r\n                            thumb_file: responseData[0].s3ThumbUrl,\r\n                            ext: updateFiles.extension,\r\n                            size: updateFiles.size,\r\n                            fileName: updateFiles.name,\r\n                            mediaHeight: responseData[0].height,\r\n                            mediaWidth: responseData[0].width,\r\n                            uploadedFiles: [...prevState.uploadedFiles, {name:updateFiles.name, url:responseData[0].s3Url, id:updateFiles.id}]\r\n                        }), () => {\r\n                            this.onUpdateLocalState();\r\n                            videoFiles.shift()\r\n                            this.videoProcess()\r\n                        })\r\n                        tb_onsite_btn_disabled(2)\r\n                    }\r\n                }).catch((error) => {\r\n                    totalFiles = totalFiles.filter(file => file.id != updateFiles.id)\r\n                    this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\r\n                    tb_onsite_btn_disabled(2)\r\n                })\r\n            }\r\n            catch (ex) {\r\n                this.videoProcess()\r\n                this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\r\n                this.uppyUploader.uppy.reset()\r\n                tb_onsite_btn_disabled(2)\r\n            }\r\n        }\r\n        // else {\r\n\r\n        // }\r\n    }\r\n\r\n    uppyUploader = new UppyUpload(this.beforeFileAdded, this.beforeUpload, this.state.limit)\r\n\r\n    componentDidMount() {\r\n        this.uppyUploader.uppy.on('transloadit:result', (stepName, result) => {\r\n            this.setState({ isLoading: false })\r\n            const height = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.width : result.meta.height;\r\n            const width = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.height : result.meta.width;\r\n            let uploadPath = `${CloudHostUrl}media/tmpimages/`;\r\n            if (suiteTrack) uploadPath = `https://cloud.tagbox.com/ugc-suite/tmp/`;\r\n            if (isTagShop) uploadPath = `https://cloud.tagshop.ai/tmp/`;\r\n            this.setState(prevState=>({\r\n                type: result.mime.includes(\"video\") ? 5 : 4, selectedFile: result.id, selectedUrl: `${uploadPath}${result.id}.${result.ext}`, ext: result.ext, size: result.size, fileName: result.name, mediaHeight: height,\r\n                mediaWidth: width, uploadedFiles: [...prevState.uploadedFiles, {name:result.name, url:`${uploadPath}${result.id}.${result.ext}`, id:result.localId}]\r\n            }), () => this.onUpdateLocalState())\r\n            tb_onsite_btn_disabled(2)\r\n        })\r\n        this.uppyUploader.uppy.on('file-removed', (file, reason) => {\r\n            tb_onsite_btn_disabled(2)\r\n        })\r\n        this.uppyUploader.uppy.on('upload-progress', (file, progress) => {\r\n            this.setState({ uploadPercent: ((progress.bytesUploaded / progress.bytesTotal) * 100).toFixed() })\r\n        })\r\n        this.uppyUploader.uppy.on('upload-error', (file, error) => {\r\n            this.setState({\r\n                throwError: true\r\n            })\r\n        });\r\n        this.uppyUploader.uppy.on('upload-complete', (result, error) => {\r\n            this.onRemovedState(true)\r\n        });\r\n    }\r\n    onRemovedState = (isStatus) => {\r\n        const { type } = this.state\r\n        this.setState({\r\n            selectedFile: null,\r\n            selectedUrl: null,\r\n            type: null,\r\n            thumb_file: \"\",\r\n            fileSize: false,\r\n            fileSizeText: \"\",\r\n            videoPath: \"\",\r\n            ext: null, size: 0, fileName: null, mediaHeight: 0, mediaWidth: 0\r\n        }, () => {\r\n            this.onLoadError(type)\r\n            if (isStatus) this.uppyUploader.uppy.reset()\r\n        })\r\n    }\r\n\r\n    onUpdateLocalState = () => {\r\n        const { addPostImage, isActiveIndex } = this.props;\r\n        const { selectedUrl, type, thumb_file, videoPath, ext, size, fileName, mediaHeight, mediaWidth, uploadedFiles } = this.state;\r\n        addPostImage(selectedUrl, type === 5 ? thumb_file : selectedUrl, videoPath, type, isActiveIndex, ext, size, fileName, mediaHeight, mediaWidth)\r\n        if (type === 5) this.onRemovedState(false)\r\n    }\r\n\r\n    onLoadError = (type) => {\r\n        const { uploadErrorCallback } = this.props\r\n        const { fileSize, fileSizeText, filemaxSize, throwError } = this.state\r\n        const error = fileSize ? `File Size (${fileSizeText}) Limit Exceeded ${type == 4 ? 'Image' : 'Video'} Size : Max ${filemaxSize} MB` : ''\r\n        const error2 = throwError ? 'Something went wrong , Please try again.' : ''\r\n        uploadErrorCallback(error ? error : error2 ? error2 : '')\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        const { removedFile } = this.props\r\n        const {uploadedFiles} = this.state\r\n        if(!_.isEqual(removedFile, prevProps.removedFile)){\r\n            if(totalFiles.length > 0) {\r\n                const checkFile =  uploadedFiles.find(file => file.url == removedFile.video)\r\n                if(checkFile && Object.keys(checkFile).length > 0){\r\n                    if(removedFile.type!=5) this.uppyUploader.uppy.reset()                        \r\n                    const fileToRemove = totalFiles.find(file => file.id == checkFile.id);\r\n                    if (fileToRemove) {\r\n                        totalFiles = totalFiles.filter(file => file.id !== fileToRemove.id);\r\n                    }\r\n                    this.setState(prevState => ({ uploadedFiles: prevState.uploadedFiles.filter(file => file.url !== removedFile.video)}))\r\n                }\r\n            } \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, fileSize, throwError, fileSizeText, filemaxSize, type, uploadPercent, limit } = this.state;\r\n        const { upload_image } = this.props\r\n        return upload_image && upload_image.length < 20 ? <>\r\n            <div className={`t_m_upload ${upload_image && upload_image.length < 1 ? 't_m_dd' : ''}`}>\r\n                <div className='t_m_up_wrp'>\r\n                    {upload_image && upload_image.length < 1 ?\r\n                        <>\r\n                            <DragDrop\r\n                                note=\"Video Size : Max 100MB | Photo Size : Max 15MB | Max 20 Posts\"\r\n                                uppy={this.uppyUploader.uppy}\r\n                                inline={true}\r\n                                maxNumberOfFiles={limit}\r\n                                width={'100%'}\r\n                                height={'auto'}\r\n                                locale={{\r\n                                    strings: {\r\n                                        // Text to show on the droppable area.\r\n                                        // `% { browse }` is replaced with a link that opens the system file selection dialog.\r\n                                        dropHereOr: 'Drag a video / image to upload (optional)',\r\n                                        // Used as the label for the link that opens the system file selection dialog.\r\n                                        browse: '',\r\n                                    },\r\n                                }}\r\n                            />\r\n                            {isLoading ?\r\n                                <Loader value={uploadPercent} isBar={true} />\r\n                                : null}\r\n                        </>\r\n                        :\r\n                        isLoading ?\r\n                            <Loader value={uploadPercent} isBar={false} />\r\n                            :\r\n                            <>\r\n                                <FileInput\r\n                                    uppy={this.uppyUploader.uppy}\r\n                                    allowMultipleFiles={true}\r\n                                    locale={{\r\n                                        strings: {\r\n                                            // Text to show on the droppable area.\r\n                                            // `% { browse }` is replaced with a link that opens the system file selection dialog.\r\n                                            //dropHereOr: 'Drag a video / image to upload (optional)',\r\n                                            // Used as the label for the link that opens the system file selection dialog.\r\n                                            browse: 'browse',\r\n                                        },\r\n                                    }}\r\n                                />\r\n                                {/* <div className='t_m_p_ico'><div className={`tb__icon tb-close-thin tb-plus_icon`}><div></div></div></div> */}\r\n                            </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </> : null\r\n    }\r\n}\r\n\r\nexport default Uploads;"],"names":["uppyBucket","isTagShop","constructor","beforeFileAdded","beforeUpload","limit","uploadPath","bucket","suiteTrack","this","uppy","Uppy","meta","type","autoProceed","debug","allowMultipleUploads","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","onBeforeFileAdded","onBeforeUpload","use","Transloadit","params","auth","key","steps","store","robot","bucket_region","result","secret","path","waitForEncoding","Loader","_ref","value","isBar","progress","Math","round","_jsx","className","children","style","width","concat","_jsxs","height","viewBox","version","xmlns","transform","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","id","strokeLinecap","x","y","fontSize","textAnchor","dominantBaseline","videoFiles","totalFiles","Uploads","Component","arguments","state","isLoading","selectedFile","selectedUrl","thumb_file","fileSize","filemaxSize","throwError","videoPath","fileSizeText","ext","size","fileName","mediaHeight","mediaWidth","uploadPercent","uploadedFiles","currentFile","files","length","find","file","tb_onsite_btn_disabled","sizeText","bytesToSize","includes","fileType","setState","onLoadError","setTimeout","maxuploadSize","push","videoProcess","Object","fromEntries","entries","filter","_ref2","fileId","onsite_token","props","updateFiles","data","FormData","append","config","headers","productdomain","onUploadProgress","progressEvent","percent","loaded","total","axios","VIDEO_COMPRESS","then","response","responseData","prevState","sscode","s3Url","s3ThumbUrl","extension","name","url","onUpdateLocalState","shift","catch","error","ex","uppyUploader","reset","UppyUpload","onRemovedState","isStatus","addPostImage","isActiveIndex","uploadErrorCallback","error2","componentDidMount","on","stepName","orientation","CloudHostUrl","mime","localId","reason","bytesUploaded","bytesTotal","toFixed","componentDidUpdate","prevProps","removedFile","_","checkFile","video","keys","fileToRemove","render","upload_image","_Fragment","DragDrop","note","inline","locale","strings","dropHereOr","browse","FileInput","allowMultipleFiles"],"sourceRoot":""}