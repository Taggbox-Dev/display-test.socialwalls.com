{"version":3,"file":"static/js/2916.1e8f7cef.chunk.js","mappings":"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","sources":["app/Components/ReelPopUp/Elements/ReelBranding.js","app/Components/ReelPopUp/Elements/AddToCart.js","app/Components/ReelPopUp/Elements/CheckOut.js","app/Components/ReelPopUp/Elements/ReelProducts.js","app/Components/ReelPopUp/Elements/ReelMedia.js","app/Components/ReelPopUp/ReelBody.js","app/Components/ReelPopUp/PostPopUp.js","app/Components/ReelPopUp/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport { CloudUrl, WebUrl } from \"../../../../constants\";\n\nfunction importantCss(el) {\n  el.style.setProperty('visibility', 'visible', 'important');\n  el.style.setProperty('opacity', '1', 'important');\n  el.style.setProperty('display', 'flex', 'important');\n  el.style.setProperty('transform', 'none', 'important');\n  el.style.setProperty('clip-path', 'initial', 'important');\n}\n\nexport default class ReelBranding extends PureComponent {\n  render() {\n    const logoName = 'tagshop-branding.svg'\n    return (\n      <a href={WebUrl} target={'_blank'}\n        ref={(el) => {\n          if (el) {\n            el.style.setProperty('margin-right', '15px', 'important');\n            el.style.setProperty('width', '90px', 'important');\n            el.style.setProperty('height', 'auto', 'important');\n            importantCss(el)\n          }\n        }}>\n        <img ref={(el) => {\n          if (el) {\n            el.style.setProperty('width', '100%', 'important');\n            el.style.setProperty('height', 'auto', 'important');\n            importantCss(el)\n          }\n        }}\n          src={`${CloudUrl}/media/images/${logoName}`}\n        />\n      </a>\n    );\n  }\n}\n","import React, { Component } from 'react'\nimport { addToCart, trackAddToCart } from '../../../../actions/cartActions'\nimport { TagshopBranding, NO_PRODUCT_IMAGE } from '../../../../constants'\nimport { dataSource, themePostTracking } from '../../../../actions/themeActions'\nimport ReelBranding from './ReelBranding'\nconst findAInB = (A, B) => B.filter(obj => A.every(item => obj.options.includes(item)))\nexport default class AddToCart extends Component {\n    state = { allSizes: null, allColors: null, selectedColor: null, selectedSize: null, availableSize: [], productImage: '', optionError: false, productOption: [], isSoldOut: false }\n    componentDidMount() {\n        this.getOptions()\n        this.getProductImage()\n    }\n    getOptions = () => {\n        // const { productDetails } = this.props\n        // var colors = []\n        // var size = []\n        // if (productDetails && productDetails.options && productDetails.options.length) {\n        //     productDetails.options.map(option => {\n        //         if (option.values && option.values.length) {\n        //             if (option.name.toLowerCase() == 'color') { colors = option.values; this.setState({ selectedColor: option.values[0] }) }\n        //             if (option.name.toLowerCase() == 'size') size = option.values\n        //             else { colors = option.values; this.setState({ selectedColor: option.values[0] }) }\n        //         }\n        //     })\n        // }\n        // this.setState({ allSizes: size, allColors: colors })\n        // if (!colors || !colors.length) {\n        //     var availableSize = []\n        //     productDetails.variants.map(vr => {\n        //         if (vr.available) {\n        //             if (!availableSize.includes(vr.option1)) availableSize.push(vr.option1)\n        //         }\n        //     })\n        //     this.setState({ availableSize })\n\n        // }\n        // else if (size && size.length) this.checkAvablity(colors[0])\n        const { productDetails } = this.props\n        if (productDetails && Object.keys(productDetails).length > 0) {\n            const data = productDetails\n            var colors = []\n            var size = []\n            var productOption = []\n            if (data && data.options && data.options.length) {\n                data.options.map((option, index) => {\n                    if (option.values && option.values.length) {\n                        let availableVarient = []\n                        let availableVarientIndex = null\n                        let isMediaAvailable = []\n                        option.values.map((value, cIndex) => {\n                            const result = data.variants.find(vr => vr.options.includes(value))\n                            isMediaAvailable.push(result.featured_image?.src)\n\n                            const resultCo = data.variants.filter(vr => vr.options.includes(value) && vr.available)\n\n                            if (resultCo && resultCo.length > 0) {\n\n                                if (result && result.available && !availableVarient.includes(value)) {\n                                    availableVarient.push(value);\n\n                                    if (availableVarientIndex == null && resultCo[0][`option${index + 1}`] == value) availableVarientIndex = cIndex\n                                }\n                            }\n                            // data.variants.map((vr, vrIndex) => {\n                            //        if (vr.available && !availableVarient.includes(vr[`option${index + 1}`])) {\n                            //               console.log('vr', vr.available, vr[`option${index + 1}`], value, availableVarientIndex, vrIndex)\n                            //               availableVarient.push(vr[`option${index + 1}`]);\n                            //               if (availableVarientIndex == null) availableVarientIndex = vrIndex\n                            //        }\n                            // })\n                        })\n                        const filteredArray = isMediaAvailable.filter(element => element !== undefined);\n                        let currentSelectedIndex = 0\n                        if (data.options && data.options.length == 1) currentSelectedIndex = availableVarientIndex ? availableVarientIndex : 0\n\n\n                        productOption.push({ key: option.name, value: option.values, selected: option.values[index == 0 ? currentSelectedIndex : availableVarientIndex ? availableVarientIndex : 0], availableVarient: availableVarient, isMediaShow: filteredArray.length == isMediaAvailable.length })\n                        // if (option.name.toLowerCase() == 'color') { colors = option.values; this.setState({ selectedColor: option.values[0] }) }\n                        // if (option.name.toLowerCase() == 'size') size = option.values\n                        // else { colors = option.values; this.setState({ selectedColor: option.values[0] }) }\n                    }\n                })\n            }\n\n            this.setState({ allSizes: size, allColors: colors, productOption }, () => this.getProductImage())\n        }\n    }\n    onClickSelectVarient = (optionIndex, value, isMedia) => event => {\n        let { productOption } = this.state\n        const { productDetails } = this.props\n        const data = productDetails\n        productOption[optionIndex].selected = value\n        let productImage = {}\n        if (isMedia) {\n            const result = data.variants.find(vr => vr.options.includes(value))\n            productImage = { productImage: result.featured_image ? result.featured_image?.src : this.props.productImg }\n        }\n\n        let isSoldOut = false\n        productOption.map((option, index) => {\n            let availableVarient = []\n            let availableVarientIndex = null\n            if (optionIndex < index) {\n                const result = data.variants.filter(vr => vr.options.includes(value))\n                if (result && result.length > 0) {\n\n                    result.map((resultOpt, resultOptIndex) => {\n                        if (resultOpt.available & !availableVarient.includes(resultOpt[`option${index + 1}`])) {\n\n                            availableVarient.push(resultOpt[`option${index + 1}`]);\n                            if (availableVarientIndex == null) availableVarientIndex = resultOptIndex\n                        }\n                    })\n                }\n                productOption[index].selected = option.value[availableVarientIndex ? availableVarientIndex : 0]\n                productOption[index].availableVarient = availableVarient\n                isSoldOut = availableVarient.length == 0\n            }\n\n        })\n        this.setState({ productOption, optionError: false, isSoldOut: isSoldOut ? isSoldOut : false, ...productImage })\n    }\n    // onAddToCart = () => {\n    //     const { variants } = this.props.productDetails\n    //     const { selectedColor, selectedSize, allColors, allSizes } = this.state\n    //     if ((!selectedSize || selectedSize == '') && (allSizes && allSizes.length)) {\n    //         this.setState({ optionError: true })\n    //         return\n    //     }\n    //     if (variants.length == 1) {\n    //         this.props.onSelectedVariant(variants[0])\n    //         this.addProductsToCart(variants[0])\n    //     }\n    //     else {\n    //         var vr_payload = null\n    //         var vr_payload_bkp = null\n    //         variants.map(vr => {\n    //             if (!selectedColor || !selectedColor.length) {\n    //                 if (vr.options.includes(selectedSize)) {\n    //                     this.props.onSelectedVariant(vr)\n    //                     this.addProductsToCart(vr)\n    //                 }\n    //             }\n    //             else {\n    //                 if (vr.options.includes(selectedColor) && vr.options.includes(selectedSize)) vr_payload = vr\n    //                 else if (vr.options.includes(selectedColor)) vr_payload_bkp = vr\n    //             }\n    //         })\n    //         if (vr_payload != null) {\n    //             this.props.onSelectedVariant(vr_payload)\n    //             this.addProductsToCart(vr_payload)\n    //         }\n    //         else if (vr_payload_bkp) {\n    //             this.props.onSelectedVariant(vr_payload_bkp)\n    //             this.addProductsToCart(vr_payload_bkp)\n    //         }\n    //         else {\n    //             console.log(\"Shopify Variants Error!!\")\n    //         }\n\n    //     }\n    // }\n\n\n    onAddToCart = () => {\n        try {\n\n            const { productDetails } = this.props\n            if (productDetails && Object.keys(productDetails).length > 0) {\n                const data = productDetails\n                const { variants } = data\n                const { selectedColor, selectedSize, allColors, allSizes, productOption } = this.state\n                var selectedOptions = []\n                if (productOption && productOption.length > 0) {\n                    productOption.map((option, index) => {\n                        if (!option.selected) {\n                            console.log(\"optionError\")\n                            this.setState({ optionError: true })\n                            return\n                        }\n                        else if (option.availableVarient.length == 0) {\n                            this.setState({ isSoldOut: true })\n                            return\n                        }\n                        else selectedOptions.push(option.selected)\n                    })\n                }\n                if (variants.length == 1) {\n                    this.props.onSelectedVariant(variants[0])\n                    this.addProductsToCart(variants[0])\n                }\n                else {\n                    const result = findAInB(selectedOptions, variants);\n                    if (result && result.length > 0) {\n                        this.props.onSelectedVariant(result[0])\n                        this.addProductsToCart(result[0])\n                    }\n                }\n            }\n        } catch (error) {\n            console.log('error', error)\n        }\n    }\n\n\n    addProductsToCart = (variant) => {\n        const { wall, tagshopProductDeatil } = this.props\n        const payload = new FormData()\n        payload.append('id', variant.id)\n        payload.append('quantity', 1)\n        addToCart(payload).then(res => {\n            const obj = {\n                variant: variant.options ? variant.options.join(\",\") : \"\",\n                price: variant.price / 100,\n                wall: dataSource == 'website' ? wall.Wall.wallId : wall.Wall.id,\n                website_id: dataSource == 'website' ? wall.Wall.id : 0,\n                product_id: tagshopProductDeatil.UgcProduct.id,\n                quantity: 1,\n                post: tagshopProductDeatil.post_id,\n                owner: wall.Wall.owner,\n                feed: tagshopProductDeatil?.trackingData?.feed,\n                currency: tagshopProductDeatil?.trackingData?.currency,\n            }\n            trackAddToCart(obj)\n            //if (tagshopProductDeatil?.trackingData && Object.keys(tagshopProductDeatil.trackingData).length > 0) themePostTracking(tagshopProductDeatil.trackingData)\n            this.props.onAddToCart()\n        }).catch(err => {\n            this.props.onAddToCart()\n        })\n    }\n\n    getColorImage = (color) => {\n        const { productDetails } = this.props\n        if (color) {\n            const result = productDetails.variants.find(vr => vr.options.includes(color))\n            // this.setState({ productImage: result.featured_image ? result.featured_image?.src : this.props.productImg})\n            return result.featured_image ? result.featured_image?.src : this.props.productImg\n        }\n    }\n\n    getCurrentVarient = (optiValue) => {\n\n        const { productDetails } = this.props\n        if (productDetails && Object.keys(productDetails).length > 0) {\n            const data = productDetails\n            if (optiValue) {\n                const result = data.variants.find(vr => vr.options.includes(optiValue))\n                return result.featured_image ? result.featured_image?.src : null\n            }\n        }\n\n    }\n\n    // getProductImage = () => {\n    //     const { productDetails } = this.props\n    //     const { selectedColor } = this.state\n    //     if (selectedColor) {\n    //         // const result = productDetails.variants.find(vr => {\n    //         //     if (vr.options.includes(selectedColor)) {\n    //         //         // this.props.onSelectedVariant(vr)\n    //         //         // this.addProductsToCart(vr.id)\n    //         //         // return vr.featured_image ? vr.featured_image?.src : false\n    //         //         this.setState({ productImage: vr.featured_image ? vr.featured_image?.src : \"\" })\n    //         //         // return false\n    //         //     }\n    //         // })\n    //         const result = productDetails.variants.find(vr => vr.options.includes(selectedColor))\n    //         this.setState({ productImage: result.featured_image ? result.featured_image?.src : this.props.productImg })\n    //     }\n    //     else { this.setState({ productImage: productDetails.featured_image }) }\n    // }\n\n    getProductImage = () => {\n        const { productDetails } = this.props\n        const { productOption } = this.state\n        if (productOption && productOption.length > 0) {\n            if (productDetails && Object.keys(productDetails).length > 0) {\n                if (productOption[0].selected) {\n                    const result = productDetails.variants.find(vr => vr.options.includes(productOption[0].selected))\n                    this.setState({ productImage: result.featured_image ? result.featured_image?.src : this.props.productImg })\n                }\n                else { this.setState({ productImage: productDetails.featured_image }) }\n            }\n        }\n\n    }\n\n\n    render() {\n        const { closeAddtocart, addtoCartPopup, productDetails, onSelectedVariant, productImg, wall, tagshopProductDeatil, isFreePlan } = this.props\n        const { allColors, allSizes, selectedColor, availableSize, selectedSize, productImage, optionError, productOption, isSoldOut } = this.state\n        return (\n\n            <div className=\"tb_rp_cart_wrapper\">\n                <div className=\"tb_rp_p_detail\">\n                    <div className=\"tb_rp_p_img_\">\n                        <img src={productImage ? productImage : NO_PRODUCT_IMAGE} alt={productDetails.title} onError={e => this.setState({ productImage: NO_PRODUCT_IMAGE })} />\n                    </div>\n                    <div className=\"tb_rp_p_cont_\">\n                        <div className=\"tb_rp_cp_title\">{productDetails.title}</div>\n                        <div className=\"tb_rp_cp_price\">{tagshopProductDeatil?.UgcProduct?.price_currency_symbol}{tagshopProductDeatil?.UgcProduct.product_discount > 0 ? tagshopProductDeatil?.UgcProduct.product_discount : tagshopProductDeatil?.UgcProduct.product_price}</div>\n                    </div>\n                </div>\n                {optionError ? <div className={`tb_rp_cp_error ${optionError ? 'tb_rp_cp_error-visible' : ''}`}>Please select any one variant to proceed!</div> : <></>}\n\n                {\n                    productOption && productOption.length > 0 ? <>\n                        {\n                            productOption.map((option, index) => {\n                                return <div className=\"tb_rp_cp__pl\" key={index}>\n                                    <div className=\"tb_rp_cp_op_title\">{option.key}:</div>\n                                    <div className=\"tb_rp_cp_op_wrap\">\n                                        {option.value.map((optValue, optindex) => {\n                                            const isMedia = this.getCurrentVarient(optValue)\n                                            const isAvailable = option.availableVarient.includes(optValue)\n                                            return <>\n                                                {\n                                                    (String(option.key).toLowerCase().includes('size') || (String(option.key).toLowerCase().includes('color') && !option.isMediaShow) || isMedia == null) ? isAvailable ? <div className={`tb_rp_cp_op_ tb_rp_cp_op_size${option.selected == optValue ? ' tb_active' : ''}`} onClick={this.onClickSelectVarient(index, optValue, false)}>\n                                                        <div className=\"tb_rp_cp_tile\">\n                                                            {optValue}\n                                                        </div>\n                                                    </div> : <div className={`tb_rp_cp_op_ tb_rp_cp_op_size tb_disabled`}>\n                                                        <div className=\"tb_rp_cp_tile\">\n                                                            {optValue}\n                                                        </div>\n                                                    </div> : <div className={`tb_rp_cp_op_ ${option.selected == optValue ? 'tb_active' : ''}`} onClick={this.onClickSelectVarient(index, optValue, true)}>\n                                                        <div className=\"tb_rp_cp_tile\">\n                                                            <img className='tb_rp_cp_op_img' src={isMedia} onError={e => e.target.src = NO_PRODUCT_IMAGE} />\n                                                        </div>\n                                                    </div >}\n                                            </>\n\n\n                                        })}\n                                    </div>\n                                </div>\n                            })\n                        }\n\n\n                    </> : null\n\n                }\n\n                {/* {allColors && allColors.length ?\n                    <div className=\"tb_rp_cp__pl\">\n                        <div className=\"tb_rp_cp_op_title\">Color:</div>\n                        <div className=\"tb_rp_cp_op_wrap\">\n                            {allColors.map(color => (\n                                <div className={`tb_rp_cp_op_ ${selectedColor == color ? 'tb_active' : ''}`} onClick={() => this.setState({ selectedColor: color }, () => this.checkAvablity(color))}>\n                                    <div className=\"tb_rp_cp_tile\" style={{ backgroundColor: color }}>\n                                        <img className='tb_rp_cp_op_img' src={this.getColorImage(color)} onError={e => e.target.src = NO_PRODUCT_IMAGE} />\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    : null} */}\n\n                {/* {allSizes && allSizes.length ?\n                    <div className=\"tb_rp_cp__pl\">\n                        <div className=\"tb_rp_cp_op_title\">Size:</div>\n                        <div className=\"tb_rp_cp_op_wrap\">\n                            {allSizes.map(size => (\n                                <div className={`tb_rp_cp_op_ tb_rp_cp_op_size${size == selectedSize ? ' tb_active' : ''}${!availableSize.includes(size) ? ' tb_disabled' : ''}`} onClick={() => availableSize.includes(size) ? this.setState({ selectedSize: size, optionError: false }) : null}>\n                                    <div className=\"tb_rp_cp_tile\">\n                                        {size}\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    : null} */}\n                <div className=\"tb_rp_cp__action\">\n                    <div className=\"tb_cart_secondary\" onClick={closeAddtocart}>Cancel</div>\n                    <div className=\"tb_cart_primary\" onClick={this.onAddToCart} style={isSoldOut ? { pointerEvents: 'none', opacity: 0.4 } : {}}>ADD TO CART</div>\n                </div>\n                {(wall.UserRule.branding_lite && wall.UserRule.branding_lite == 1) || isFreePlan ? <ReelBranding wallId={wall.Wall.id} themeID={wall.Personalization.widgetTheme} /> : null}\n            </div >\n\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { getCartItemCount } from '../../../../actions/cartActions'\nimport { clientHost } from '../../../../actions/api'\nimport { NO_PRODUCT_IMAGE, TagshopBranding } from '../../../../constants'\n\nexport default class CheckOut extends Component {\n  state = { cartItems: 1 }\n\n  componentDidMount() {\n    getCartItemCount().then(res => {\n      const { item_count } = res.data\n      if (item_count) this.setState({ cartItems: item_count })\n    }).catch(err => {\n      console.error(err)\n    })\n  }\n\n  render() {\n    const { productDetails, closeAddtocart, productImg, wall, tagshopProductDeatil } = this.props\n    return <div className=\"tb_rp_cart_wrapper tb_rp_checkOut\">\n      <div className=\"tb_rp_p_detail\">\n        <div className=\"tb_rp_p_img_\">\n          <img src={productDetails.featured_image ? productDetails.featured_image.src : productImg} alt={productDetails.name} onError={e => e.target.src = NO_PRODUCT_IMAGE} />\n        </div>\n        <div className=\"tb_rp_p_cont_\">\n          <div className=\"tb_rp_cp_title\">{productDetails.name}</div>\n          <div className=\"tb_rp_cp_price\">{tagshopProductDeatil?.UgcProduct?.price_currency_symbol}{tagshopProductDeatil?.UgcProduct.product_discount > 0 ? tagshopProductDeatil?.UgcProduct.product_discount : tagshopProductDeatil?.UgcProduct.product_price}</div>\n        </div>\n      </div>\n      {this.state.cartItems ? <div className=\"tb_rp_p_info\">Your cart now has {this.state.cartItems} item </div> : null}\n\n      <div className=\"tb_rp_cp__action\">\n        <div className=\"tb_cart_primary\" onClick={() => window.location = `${clientHost}/cart`}>Proceed to checkout</div>\n        <div className=\"tb_cart_secondary\" onClick={closeAddtocart}>Continue Shopping</div>\n      </div>\n    </div>\n  }\n}\n","import React, { useState, memo } from 'react'\nimport { themePostTracking } from '../../../../actions/themeActions';\nimport { fetchShopifyProduct } from '../../../../actions/cartActions';\n\nconst ReelProducts = ({ product, wall, onsetProductImg, openAddtocart, item, setOnProductDetails }) => {\n    const [noImg, setNoImg] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const ownerId = wall.User.id;\n    const Button = wall.ProductSetting.Button;\n    const tracking = (wall, product) => themePostTracking({ type: 1, action: 2, wall: wall?.Wall?.id, product_id: product.id, post: item.referenceId, owner: wall.Wall.owner, feed: item.feedId, currency: product.price_currency, price: product.product_discount > 0 ? product.product_discount : product.product_price })\n    const checkForShopify = async () => {\n        setLoading(true)\n        const itemDetails = {};\n        if (product && product.UgcProduct && product.UgcProduct.product_url) {\n            try {\n                if (wall?.Wall?.owner == 140717 || wall?.ProductSetting?.Button?.pdp_target == 1) {\n                    openUrl(product.UgcProduct.product_url)\n                    onsetProductImg(product.product_image)\n                    setLoading(false)\n                    tracking(wall, product.UgcProduct)\n                }\n                else {\n                    fetchShopifyProduct(product.UgcProduct.product_url)\n                        .then(res => {\n                            if (res.data) {\n                                itemDetails[product.id] = res.data;\n                                onsetProductImg(res.data.featured_image ? res.data.featured_image : product.product_image)\n                                setLoading(false)\n                                setOnProductDetails(itemDetails)\n                                openAddtocart(product.id, product)\n                            }\n                        })\n                        .catch(error => {\n                            console.log('error', error)\n                            openUrl(product.UgcProduct.product_url)\n                            onsetProductImg(product.product_image)\n                            setLoading(false)\n                            tracking(wall, product.UgcProduct)\n                        });\n                }\n\n\n            } catch (error) {\n                console.log('error', error)\n                openUrl(product.UgcProduct.product_url)\n                setLoading(false)\n\n            }\n        }\n    }\n    const openUrl = (url) => {\n        const { Button } = wall.ProductSetting\n        var newUrl = url;\n        if (parseInt(Button.newTab) == 2) window.parent.location.href = newUrl\n        else window.open(newUrl, '_blank');\n    }\n\n    const products = product.UgcProduct\n    return <div className={`tb_rpp_pro ${noImg ? \"ts_reelTheme_No_Product\" : \"\"}`}>\n        {!noImg ? <div className='tb_rpp_pro_img'>\n            <img src={products.product_image} alt=\"\" onError={() => setNoImg(true)} />\n        </div> : null}\n        <div className=\"tb_rpp_pro_cont\">\n            <div className=\"tb_rpp_pro_title\">\n                {products.product_title}\n            </div>\n            {products.product_price > 0 || products.product_discount > 0 ?\n                <div className=\"tb_rpp_p_wrap\">\n                    <div className=\"tb_rpp_p\">\n                        {products.price_currency_symbol}{products.product_discount > 0 ? products.product_discount : products.product_price}\n                    </div>\n                    {products.product_discount == 0 || products.product_price == products.product_discount ? <></> :\n                        <div className=\"tb_rpp_p tb_rpp_d_p\">\n                            {products.price_currency_symbol}{products.product_price}\n                        </div>}\n                </div> : null}\n            <div className={`tb_rpp_btn${loading ? ' tb_rpp_btn_spinner' : \"\"}`} disabled={loading} onClick={() => { checkForShopify(); }}>{Button.text} </div>\n\n        </div>\n    </div>\n}\n\nexport default memo(ReelProducts)","import React, { Component, Suspense, memo } from 'react'\n\nconst Image = React.lazy(() => import('../../../Themes/Elements/Media/Image'));\nconst ReelVideo = React.lazy(() => import('./ReelVideo'));\nconst ReelMediaSlider = React.lazy(() => import('./ReelMediaSlider'));\n\nconst ReelMedia = (props) => {\n       const { itemData, wallID, ownerId, wall, muted, autoPlay, index } = props\n       const size = false\n       return <div className=\"tb_rp_media_wrap\">\n              {\n                     itemData.imageList && itemData.imageList.length > 0 ?\n                            <Suspense fallback={<></>}><ReelMediaSlider imageList={itemData.imageList} {...props} /></Suspense>\n                            : (itemData.type === 2 || itemData.type === 4 || !autoPlay) ?\n                                   <Suspense fallback={<></>}>\n                                          <Image ImageClass=\"tb_rp_image\" data={{ ...itemData, postFileNew: itemData.filename }} wallID={wallID} themeID={wall.Personalization.widgetTheme} ownerId={ownerId} size={size} ThemeRule={wall.ThemeRule} />\n                                   </Suspense>\n                                   : (itemData.type === 3 || itemData.type === 5) ?\n                                          <Suspense fallback={<></>}><ReelVideo VideoClass=\"tb_rp_video\" data={{ ...itemData, postFileNew: itemData.filename }} wallID={wallID} themeID={wall.Personalization.widgetTheme} ownerId={ownerId} size={size} isCover={true} controls={false} autoPlay={autoPlay} muted={muted} handleVideoEnded={() => { }} index={index} /></Suspense>\n                                          : null\n              }\n       </div>\n}\nexport default memo(ReelMedia)\n\n\n\n\n\n","import React, { Component, memo } from 'react';\nimport ReelProducts from './Elements/ReelProducts'\nimport ReelMedia from './Elements/ReelMedia'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport ReelBranding from './Elements/ReelBranding';\nimport 'swiper/css';\n\nconst ReelBody = ({ wall, item, personalization, productLoading, showAddToCart, onsetProductImg, openAddtocart, setOnProductDetails, isFreePlan, index, currentVideo, muteToggle, muted }) => {\n    const ugcProduct = item.ugc_products\n    const autoPlay = (item.type === 3 || item.type === 5) && currentVideo ? true : false\n\n    return (\n        <>\n            <ReelMedia itemData={item} wallID={wall.Wall.wallId} ownerId={wall.Wall.owner} ThemeID={personalization.widgetTheme} wall={wall} muted={muted} autoPlay={autoPlay} index={index} />\n            <div className='tb_rp_content'>\n                {wall.ProductSetting && personalization.themeType == 1 && ugcProduct && ugcProduct.length > 0 ?\n                    <Swiper\n                        autoHeight={true}\n                        speed={400}\n                        edgeSwipeDetection={true}\n                        slidesPerView={item.ugc_products && item.ugc_products.length > 1 ? 1.3 : 1}\n                        touchRatio={2}\n                        spaceBetween={0}\n                        mousewheel={{ forceToAxis: true, sensitivity: 2 }}\n                        watchSlidesProgress={true}\n                        direction='horizontal'\n                        className=\"tb_rpp_wrap\">\n                        {item.ugc_products && item.ugc_products.map((product, index) => {\n                            return <SwiperSlide key={index}>\n                                <ReelProducts product={product} openAddtocart={openAddtocart} onsetProductImg={onsetProductImg} showAddToCart={showAddToCart} productLoading={productLoading} wall={wall} ugcSetting={wall.ProductSetting} item={item} setOnProductDetails={setOnProductDetails} />\n                            </SwiperSlide>\n                        })\n                        }\n                    </Swiper>\n                    : null}\n\n\n                {autoPlay ?\n                    <div className=\"tb_rp_mute_btn\" onClick={muteToggle}>\n                        <div className={`tb__icon tb-${!muted ? `unmute` : `mute`}`}><div></div></div>\n                    </div>\n                    : null}\n\n                {(wall.UserRule.branding_lite && wall.UserRule.branding_lite == 1) || isFreePlan ? <ReelBranding wallId={wall.Wall.id} themeID={wall.Personalization.widgetTheme} /> : null}\n            </div>\n        </>\n    );\n}\nexport default memo(ReelBody);","import React, { Component, memo } from \"react\";\nimport { isValidAuthorImage, IMG_DATA_FILTER } from '../../../utils';\nimport { themePostTracking } from '../../../actions/themeActions'\nimport { isTagEmbed, suiteTrack } from \"../../../actions/api\";\nimport AddToCart from \"./Elements/AddToCart\";\nimport CheckOut from \"./Elements/CheckOut\";\nimport CartPopUp from '../CartPopUp'\nimport ReelBody from \"./ReelBody\";\nimport { connect } from \"react-redux\";\nimport { getDataNextSteps } from \"../../../actions/themeActions\";\nimport { register } from 'swiper/element/bundle';\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport 'swiper/css';\n\nregister()\nclass PostPopUp extends Component {\n    constructor(props) {\n        super(props);\n        this.sliderRef = React.createRef();\n        this.state = {\n            currentIndex: this.props?.currentIndex,\n            item: this.props.item,\n            isVideoError: false,\n            windowWidth: window.innerWidth,\n            isAuthorImagevalid: true,\n            instaImg: IMG_DATA_FILTER(this.props.imgData, this.props.item.link),\n            isHotspot: false, addtoCartPopup: false,\n            allProductDetails: null, selectedProductId: null,\n            selectedProductDetails: null,\n            continueShopping: false,\n            selectedVariant: null,\n            showAddToCart: false,\n            productLoading: true,\n            productImg: '',\n            tagshopProductDeatil: null,\n            muted: true,\n            activeSlide: 0,\n            addCartSetTime: false,\n            selectedProdDetails: null, tagProdDetail: null\n        }\n        this.splideRef = React.createRef()\n    }\n\n    componentDidMount() {\n        const { currentIndex, item } = this.props;\n        const isAuthorImagevalid = isValidAuthorImage(item.author.picture);\n        this.setState({ currentIndex: currentIndex, item: item, isAuthorImagevalid: isAuthorImagevalid, instaImg: IMG_DATA_FILTER(this.props.imgData, this.props.item.link) });\n        this.splideRef.current.addEventListener('swiperslidechange', (event) => {\n            if (this.props.hasMoreData && event.detail[0].progress > 0.9) { this.requestData(); this.setState({ currentIndex: this.splideRef.current.swiper.activeIndex }) }\n        })\n\n    }\n\n    setMuted = event => this.setState({ muted: !this.state.muted, })\n    setOnProductDetails = (data) => this.setState({ allProductDetails: data })\n    componentWillReceiveProps(nextProps) {\n        const { currentIndex, item } = nextProps; const isAuthorImagevalid = isValidAuthorImage(item.author.picture);\n        this.setState({ currentIndex: currentIndex, item: item, isVideoError: false, isAuthorImagevalid: isAuthorImagevalid, instaImg: IMG_DATA_FILTER(this.props.imgData, this.props.item.link) });\n    }\n    onErrorVideo = (e) => this.setState({ isVideoError: true })\n    onMediaUpdate = (e) => this.setState({ isAuthorImagevalid: false });\n    onAddToCart = (id, product, item) => {\n        const { wall } = this.props;\n        setTimeout(() => {\n            this.setState({\n                addCartSetTime: true\n            })\n        }, 100);\n        const trackingData = {\n            type: 1, action: 2,\n            wall: wall.Wall.id,\n            feed: item.feedId,\n            post: item.referenceId ? item.referenceId : item.id,\n            owner: wall.Wall.owner,\n            product_id: product.UgcProduct.id,\n            currency: product.UgcProduct.price_currency, price: product.UgcProduct.product_discount > 0 ? product.UgcProduct.product_discount : product.UgcProduct.product_price\n        }\n        this.setState({ addtoCartPopup: true, selectedProductDetails: this.state.allProductDetails[id], tagshopProductDeatil: { ...product, trackingData } })\n    }\n\n\n    requestData = () => {\n        const { wall, appendData, hasMoreData, loaderData } = this.props;\n        const postCount = wall.ThemeRule.numberOfPosts;\n        const timeStamp = Math.floor(Date.now() / 1000);\n        if (hasMoreData && !loaderData.isShowMoreLoading) this.props.getDataNextSteps(wall.Wall.id, timeStamp, postCount, appendData.networkID, appendData.after, appendData.heightEvent)\n    }\n\n    onItemChange = (item) => this.setState({ item })\n\n    currentSwiperSlide = e => {\n        if (this.props.hasMoreData && e.progress > 0.9) { this.requestData(); }\n        this.onPopUpTrack(e.activeIndex)\n    }\n\n    onPopUpTrack = (currentIndex) => {\n        try {\n            const { wall, completeData } = this.props\n            let item = completeData[currentIndex] ? completeData[currentIndex] : null;\n            if (item) {\n                const requestData = { feed: item.feedId, post: item.referenceId ? item.referenceId : item.id }\n                const tagembedPayload = { wallId: wall.Wall.id, userId: wall.Wall.owner, feedId: item.feedId, postId: item.id }\n                const ugcPayload = { action: 2, wall: wall.Wall.id, feed: item.feedId, post: item.referenceId ? item.referenceId : item.id, type: 3, owner: wall.Wall.owner }\n                themePostTracking(isTagEmbed ? tagembedPayload : suiteTrack ? ugcPayload : { action: 2, wall: wall.Wall.id, ...requestData, owner: wall.Wall.owner })\n            }\n        }\n        catch (error) {\n            console.log(\"Error in PopUp Tracking\", error)\n        }\n\n    }\n\n    startSwiperSlide = e => {\n        this.setState({\n            activeSlide: e.activeIndex\n        })\n    }\n    onClickClosePopUp = (e) => this.setState({ addtoCartPopup: false, continueShopping: false, selectedProductDetails: null, addCartSetTime: false })\n    onClickCheckOut = (e) => this.setState({ addtoCartPopup: true, continueShopping: false })\n\n\n\n    render() {\n        const { personalization, onClosePopUp, slideWithArrowKeys, wall, webFilters, completeData, isFreePlan } = this.props;\n        const { currentIndex, item, isVideoError, instaImg, addtoCartPopup, selectedProductDetails, continueShopping, selectedVariant, showAddToCart, productImg, productLoading, tagshopProductDeatil, activeSlide, addCartSetTime, muted, selectedProdDetails, tagProdDetail } = this.state;\n\n\n        return <div className={`modalId${item.id} tb_rp_modal ${addCartSetTime ? 'tb_rp_add_cart_m' : ''}`} onKeyDown={slideWithArrowKeys} onKeyPress={slideWithArrowKeys} onLoad={slideWithArrowKeys} onClick={(e) => e.currentTarget == e.target && onClosePopUp(e)} >\n            <div className=\"tb_rp_dialog\">\n                {!(addtoCartPopup || continueShopping) ?\n                    <div className=\"tb_reel_close_btn\" onClick={onClosePopUp}>\n                        <div className='tb__icon tb-close-thin'><div></div></div>\n                    </div> : null}\n\n                <div className=\"tb_time_line_wrap\">\n                    <div className=\"tb_time_line\"><div></div></div>\n                </div>\n\n                <Swiper\n                    ref={this.splideRef}\n                    direction=\"vertical\"\n                    touchRatio={2}\n                    freeMode={JSON.stringify({ enabled: true, sticky: true })}\n                    height={`${window.innerHeight}`}\n                    initialSlide={currentIndex}\n                    passiveListeners={true}\n                    mousewheel={{ forceToAxis: true, sensitivity: 2 }}\n                    watchSlidesProgress={true}\n                    onSlideChange={swiper => this.currentSwiperSlide(swiper)}\n                // onSwiper={(swiper) => this.startSwiperSlide(swiper)}\n                >\n                    {\n                        (completeData && completeData.length > 0) ? completeData.map((item, index) => {\n                            return <SwiperSlide key={`${item.id}-${index}`}>\n                                {({ isActive }) => <ReelBody currentVideo={isActive} key={`${item.id}-${index}`} onClosePopUp={onClosePopUp} wall={wall} item={item} instaImg={instaImg} showAddToCart={showAddToCart} openAddtocart={(id, product) => this.onAddToCart(id, product, item)} onsetProductImg={(img) => this.setState({ productImg: img })} productLoading={productLoading} sliderRef={this.sliderRef} personalization={personalization} isVideoError={isVideoError} addtoCartPopup={addtoCartPopup} continueShopping={continueShopping} setOnProductDetails={this.setOnProductDetails} isFreePlan={isFreePlan} muteToggle={this.setMuted} muted={muted} />}\n                            </SwiperSlide>\n                        }) : <></>\n                    }\n\n                </Swiper>\n            </div>\n\n            {addtoCartPopup && selectedProductDetails ?\n                <>\n                    <div className=\"tb_rp_cart_overlay\"><div></div></div>\n                    <div className=\"tb_rp_cart_modal\">\n                        <div className=\"tb_rp_cart_body\">\n                            <div className=\"ts_reel_close_btn tb_reel_close_btn\" onClick={addtoCartPopup && !continueShopping ? this.onClickClosePopUp : continueShopping ? event => this.setState({ addtoCartPopup: true, continueShopping: false }) : null}>\n                                <div className='tb__icon tb-close-thin'><div></div></div>\n                            </div>\n                            <div className=\"tb_rp_cart_wrap\">\n\n                                {selectedProductDetails && Object.keys(selectedProductDetails).length > 0 ? <CartPopUp productImg={productImg} addtoCartPopup={addtoCartPopup} productDetails={{ data: selectedProductDetails }} tagshopProductDeatil={tagshopProductDeatil} closeCart={event => this.setState({ addtoCartPopup: false, continueShopping: false, selectedProductDetails: null })} onAddToCart={() => this.setState({ continueShopping: true })} onSelectedVariant={(value) => this.setState({ selectedVariant: value })} wall={wall} closePopUp={this.props.onClosePopUp} /> : null}\n                                {/* {continueShopping ? <CheckOut productImg={productImg} wall={wall} addtoCartPopup={addtoCartPopup} productDetails={selectedVariant} tagshopProductDeatil={tagshopProductDeatil} onBack={() => this.setState({ addtoCartPopup: true, continueShopping: false })} closeAddtocart={() => this.setState({ addtoCartPopup: false, continueShopping: false, selectedProductDetails: null })} />\n                                    : <AddToCart productImg={productImg} addtoCartPopup={addtoCartPopup} productDetails={selectedProductDetails} tagshopProductDeatil={tagshopProductDeatil} closeAddtocart={() => this.setState({ addtoCartPopup: false, continueShopping: false, selectedProductDetails: null })} onAddToCart={() => this.setState({ continueShopping: true })} onSelectedVariant={(value) => this.setState({ selectedVariant: value })} wall={wall} />} */}\n                            </div>\n                        </div>\n                    </div>\n                </>\n                : null}\n        </div>\n    }\n}\n\nconst mapStateToProps = state => {\n    const { appData } = state;\n    return {\n        loaderData: state.loaderData,\n        appendData: appData.postData.appendData,\n        hasMoreData: appData.postData.hasMoreData[0] ? appData.postData.hasMoreData[0].hasMoreData == false ? false : appData.postData.hasMoreData[appData.postData.appendData.networkID] ? appData.postData.hasMoreData[appData.postData.appendData.networkID].hasMoreData : true : true\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getDataNextSteps: (wallID, timeStamp, postCount, networkId, after, heightEvent, updateInStateNow) => dispatch(getDataNextSteps(wallID, timeStamp, postCount, networkId, after, heightEvent, updateInStateNow)),\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(PostPopUp));","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { closePopUP } from '../../../actions/themeActions'\nimport './scss/ReelPopup.scss'\nimport PostPopUp from './PostPopUp'\n\nclass ReelPopUp extends PureComponent {\n  state = { isEnable: 0, eventData: {}, shareText: \"SHARE\", viewOnText: \"View on\", currentIndex: null, completeData: {}, personalization: {}, url: null, imgData: [] }\n\n  closeCommercePopUP = event => {\n    this.setState({ isEnable: 0, currentIndex: null }, () => this.props.closePopUP());\n    var taggBoxRoot = document.getElementsByTagName('html');\n    if (taggBoxRoot && taggBoxRoot[0]) taggBoxRoot[0].style.overflow = \"\";\n  };\n\n  getCommercePopUPEvent = (data) => {\n    if (data !== undefined && data !== \"\" && data.card) {\n      this.setState({ url: \"\", isEnable: 1, eventData: data, currentIndex: data.index, completeData: data.idArray, viewOnText: data.viewOnText, shareText: data.shareText, windowParent: data, imgData: data.imgData, personalization: data.personalization }, () => this.CommercePopUPSlideWithArrowKey());\n    }\n  };\n\n\n\n  /* POP SLIDER CHANGE INDEX WITH SLIDE */\n  featuredPopSliderChangeIndex = (currentIndex) => event => {\n    const { eventData } = this.state;\n    if (currentIndex === -1) this.setState({ currentIndex: eventData.idArray.length - 1 });\n    else this.setState({ currentIndex: eventData.idArray.length === currentIndex ? 0 : currentIndex });\n  };\n\n  SliderWithKey = (currentIndex) => {\n    const { eventData } = this.state;\n    if (currentIndex === -1) this.setState({ currentIndex: eventData.idArray.length - 1 });\n    else this.setState({ currentIndex: eventData.idArray.length === currentIndex ? 0 : currentIndex });\n\n  };\n\n  componentDidMount() {\n    const { data } = this.props;\n    this.getCommercePopUPEvent(data);\n\n    var taggBoxRoot = document.getElementsByTagName('html');\n    if (taggBoxRoot && taggBoxRoot[0]) {\n      taggBoxRoot[0].style.overflow = \"hidden\";\n    }\n\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) this.getCommercePopUPEvent(this.props.data)\n  }\n  /* POP SLIDER WITH ARROW KEYS EVENTS */\n  CommercePopUPSlideWithArrowKey = e => {\n    const { personalization } = this.state;\n\n    if (personalization && personalization.popupSlideShow === 1) {\n      e = e || window.event;\n      let self = this;\n      if (e && e.keyCode && e.keyCode !== undefined) {\n        if (e.keyCode === 37) self.SliderWithKey(self.state.currentIndex - 1)\n        else if (e.keyCode === 39) self.SliderWithKey(self.state.currentIndex + 1)\n        else if (e.keyCode === 27) this.closeCommercePopUP();\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { postData } = nextProps;\n    let { completeData, eventData } = this.state\n    if (completeData.length != postData.postData.length) {\n\n      // let item = completeData[currentIndex]\n      let updatePostData = postData.postData.map(pItem => postData.completeDataObject[pItem])\n      let filteredPostData = updatePostData.filter((filterData) => !String(filterData.id).includes(\"free_add_\"))\n      // let nIndex = findFromArray(filteredPostData, item.id, currentIndex)\n      eventData.idArray = filteredPostData\n      this.setState({ completeData: filteredPostData, eventData }, () => {\n        const { currentIndex } = this.state;\n        this.setState({ currentIndex: currentIndex + 1 })\n      })\n    }\n    else {\n      const hasMoreData = postData.hasMoreData && Object.keys(postData.hasMoreData).length > 0 ? postData.hasMoreData[0] && postData.hasMoreData[0].hasMoreData == false ? false : postData.hasMoreData[postData.appendData.networkID] ? postData.hasMoreData[postData.appendData.networkID].hasMoreData : true : true\n      if (!hasMoreData) {\n        // this.setState({ currentIndex: 0 })\n      }\n    }\n\n\n\n  }\n\n\n\n  render() {\n    const { viewOnText, isEnable, currentIndex, personalization, completeData, eventData, url, imgData } = this.state;\n    const { postData } = this.props\n    let data = null;\n    if (currentIndex === -1) data = completeData[eventData.idArray.length - 1];\n    else data = completeData[currentIndex];\n    const { wall, webFilters } = this.props;\n    return isEnable === 1 && wall && completeData && Object(completeData).length > 0 ? <PostPopUp webFilters={webFilters} wall={wall} item={data} completeData={completeData} onClosePopUp={this.closeCommercePopUP} currentIndex={currentIndex} personalization={personalization} viewOnText={viewOnText} slideWithArrowKeys={this.CommercePopUPSlideWithArrowKey} featuredPopSliderChangeIndex={this.featuredPopSliderChangeIndex} hostUrl={url} imgData={imgData} isFreePlan={postData && postData.isFreeAdsStatus} />\n      : null\n  }\n}\n\n\n\n\n\n\n\n\nconst mapStateToProps = state => {\n  return {\n    wall: state.appData.wall, webFilters: state.appData.webFilters,\n  }\n}\nconst mapDispatchToProps = dispatch => { return { closePopUP: (data) => dispatch(closePopUP(data)), } }\nexport default connect(mapStateToProps, mapDispatchToProps)(ReelPopUp);\n\n"],"names":["importantCss","el","style","setProperty","ReelBranding","PureComponent","render","_jsx","href","WebUrl","target","ref","children","src","concat","CloudUrl","Component","ReelProducts","_ref","product","wall","onsetProductImg","openAddtocart","item","setOnProductDetails","noImg","setNoImg","useState","loading","setLoading","Button","User","id","ProductSetting","tracking","_wall$Wall","themePostTracking","type","action","Wall","product_id","post","referenceId","owner","feed","feedId","currency","price_currency","price","product_discount","product_price","openUrl","url","newUrl","parseInt","newTab","window","parent","location","open","products","UgcProduct","_jsxs","className","product_image","alt","onError","product_title","price_currency_symbol","_Fragment","disabled","onClick","async","itemDetails","product_url","_wall$Wall2","_wall$ProductSetting","_wall$ProductSetting$","pdp_target","fetchShopifyProduct","then","res","data","featured_image","catch","error","console","log","checkForShopify","text","memo","Image","React","ReelVideo","ReelMediaSlider","ReelMedia","props","itemData","wallID","ownerId","muted","autoPlay","index","size","imageList","length","Suspense","fallback","_objectSpread","VideoClass","postFileNew","filename","themeID","Personalization","widgetTheme","isCover","controls","handleVideoEnded","ImageClass","ThemeRule","ReelBody","personalization","productLoading","showAddToCart","isFreePlan","currentVideo","muteToggle","ugcProduct","ugc_products","wallId","ThemeID","themeType","Swiper","autoHeight","speed","edgeSwipeDetection","slidesPerView","touchRatio","spaceBetween","mousewheel","forceToAxis","sensitivity","watchSlidesProgress","direction","map","SwiperSlide","ugcSetting","UserRule","branding_lite","register","PostPopUp","constructor","_this$props","super","setMuted","event","this","setState","state","allProductDetails","onErrorVideo","e","isVideoError","onMediaUpdate","isAuthorImagevalid","onAddToCart","setTimeout","addCartSetTime","trackingData","addtoCartPopup","selectedProductDetails","tagshopProductDeatil","requestData","appendData","hasMoreData","loaderData","postCount","numberOfPosts","timeStamp","Math","floor","Date","now","isShowMoreLoading","getDataNextSteps","networkID","after","heightEvent","onItemChange","currentSwiperSlide","progress","onPopUpTrack","activeIndex","currentIndex","completeData","tagembedPayload","userId","postId","ugcPayload","isTagEmbed","suiteTrack","startSwiperSlide","activeSlide","onClickClosePopUp","continueShopping","onClickCheckOut","sliderRef","windowWidth","innerWidth","instaImg","IMG_DATA_FILTER","imgData","link","isHotspot","selectedProductId","selectedVariant","productImg","selectedProdDetails","tagProdDetail","splideRef","componentDidMount","isValidAuthorImage","author","picture","current","addEventListener","detail","swiper","componentWillReceiveProps","nextProps","onClosePopUp","slideWithArrowKeys","webFilters","onKeyDown","onKeyPress","onLoad","currentTarget","freeMode","JSON","stringify","enabled","sticky","height","innerHeight","initialSlide","passiveListeners","onSlideChange","isActive","img","Object","keys","CartPopUp","productDetails","closeCart","onSelectedVariant","value","closePopUp","connect","appData","postData","dispatch","networkId","updateInStateNow","ReelPopUp","arguments","isEnable","eventData","shareText","viewOnText","closeCommercePopUP","closePopUP","taggBoxRoot","document","getElementsByTagName","overflow","getCommercePopUPEvent","undefined","card","idArray","windowParent","CommercePopUPSlideWithArrowKey","featuredPopSliderChangeIndex","SliderWithKey","popupSlideShow","self","keyCode","componentDidUpdate","prevProps","filteredPostData","pItem","completeDataObject","filter","filterData","String","includes","hostUrl","isFreeAdsStatus"],"sourceRoot":""}