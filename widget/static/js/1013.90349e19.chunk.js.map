{"version":3,"file":"static/js/1013.90349e19.chunk.js","mappings":"mKAGA,MASA,EATsBA,IAAuB,IAADC,EAAA,IAArB,OAAEC,EAAM,KAAEC,GAAMH,EACrC,MAAMI,EAAmD,aAA5B,OAAJD,QAAI,IAAJA,GAAU,QAANF,EAAJE,EAAME,YAAI,IAAAJ,OAAN,EAAJA,EAAYK,mBAAkCC,OAAOC,SAASC,KAAKC,SAAS,YAC/FC,EAAWC,EAAAA,IAAcR,EAAmB,eAAiBS,EAAAA,GAAY,cAAgBC,EAAAA,GAAe,kBAAoB,oBAClI,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,UACxCF,EAAAA,EAAAA,KAAA,KAAGN,KAAMP,GAAe,GAAAgB,OAAMd,EAAgB,wBAA6Be,EAAAA,IAAgBC,OAAQ,SAAUJ,UAAU,yBAAyBK,MAAO,CACrJC,gBAAgB,OAADJ,OAASK,EAAAA,GAAQ,gBAAAL,OAAeP,EAAQ,MACvDM,SAAC,OACC,C,uHCPR,MAAMO,EAAYjB,OAAOC,SAASC,KAAKC,SAAS,aA0BhD,EAxBqBV,IAAkC,IAADC,EAAA,IAAhC,OAAEwB,EAAM,KAAEtB,EAAI,WAACuB,GAAY1B,EAC7C,MAAMI,EAAmD,aAA5B,OAAJD,QAAI,IAAJA,GAAU,QAANF,EAAJE,EAAME,YAAI,IAAAJ,OAAN,EAAJA,EAAYK,mBAAkCC,OAAOC,SAASC,KAAKC,SAAS,YACrG,OAAOK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,UACzCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,SAC/BQ,GAAWD,GAAmLT,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAV,SAE1K,KAAdS,GAAoBX,EAAAA,EAAAA,KAAA,UAAQa,QAASA,KAAMC,EAAAA,EAAAA,IAAc,GAAIb,UAAU,uBAAsBC,SAAC,gBAAsBa,EAAAA,EAAAA,MAAAH,EAAAA,SAAA,CAAAV,SAAA,EAAEF,EAAAA,EAAAA,KAAA,UAAQa,QAASA,KAAMC,EAAAA,EAAAA,IAAc,GAAIb,UAAU,uBAAuBK,MAAO,CAAEU,YAAa,QAASd,SAAC,sBAC5NF,EAAAA,EAAAA,KAAA,UAAQa,QAASA,KAAMC,EAAAA,EAAAA,IAAc,GAAIb,UAAU,sCAAqCC,SAAC,0BAH5EF,EAAAA,EAAAA,KAAA,KAAGN,KAAI,GAAAS,OAAKd,EAAmB4B,EAAAA,GAAiBC,EAAAA,IAAWb,OAAQ,SAAUJ,UAAU,uBAAsBC,SAAEH,EAAAA,GAAY,qCAkBtJ,ECdV,EAVqBd,IAAsD,IAArD,OAAEyB,EAAM,MAAES,EAAK,YAAEC,EAAW,WAAET,EAAU,KAACvB,GAAMH,EACnE,OAAO8B,EAAAA,EAAAA,MAAA,OAAKd,UAAU,wBAAuBC,SAAA,EAC3Ca,EAAAA,EAAAA,MAAA,OAAKd,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAAEiB,KACjCnB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAAEmB,EAAAA,EAAAA,IAAgBD,MAC/CpB,EAAAA,EAAAA,KAACsB,EAAY,CAACZ,OAAQA,EAAQtB,KAAMA,EAAMuB,WAAYA,OAEtDD,EAAyC,MAAhCV,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CAACnC,KAAMA,MAC5B,C","sources":["app/Components/ErrorPages/Elements/ErrorBranding.js","app/Components/ErrorPages/Elements/ErrorButtons.js","app/Components/ErrorPages/Elements/ErrorMessage.js"],"sourcesContent":["import { isTagEmbed, isTagShop, isSocialWall } from \"../../../../actions/api\";\r\nimport { CloudUrl, WebWidgetUrl } from \"../../../../constants\";\r\n\r\nconst ErrorBranding = ({ isLink, wall }) => {\r\n  const isTagEmbedStatus = wall?.User?.userDatabaseType == \"tagembed\" || window.location.href.includes('tagembed')\r\n  const logoName = isTagEmbed || isTagEmbedStatus ? 'tagembed.svg' : isTagShop ? 'tagshop.svg' : isSocialWall ? 'socialwalls.svg' : 'tagbox-widget.svg'\r\n  return <div className=\"tb_error_page_logo\">\r\n    <a href={isLink ? isLink : `${isTagEmbedStatus ? `https://tagembed.com/` : WebWidgetUrl}`} target={'_blank'} className=\"tb_error_page_logo_ico\" style={{\r\n      backgroundImage: `url(${CloudUrl}/media/logo/${logoName})`\r\n    }}> </a>\r\n  </div>\r\n}\r\nexport default ErrorBranding\r\n","import { AppUrls, isSocialWall } from \"../../../../actions/api\";\r\nimport { onWindowEvent } from \"../../../../utils\";\r\nimport { TagembedAppUrl } from \"../../../../actions/api\";\r\nconst isPreview = window.location.href.includes(\"preview=1\")\r\n\r\nconst ErrorButtons = ({ editor, wall,error_code }) => {\r\n    const isTagEmbedStatus = wall?.User?.userDatabaseType == \"tagembed\" || window.location.href.includes('tagembed')\r\n    return <div className=\"tb_error_page_actions\">\r\n        <div className=\"tb_error_action_list\">\r\n            {!editor && !isPreview ? <a href={`${isTagEmbedStatus ? TagembedAppUrl : AppUrls}`} target={'_blank'} className=\"tb_error_btn_primary\">{isSocialWall ? `Add Another Feed` : `Access Now`}</a> : <>\r\n            {\r\n                    error_code == 213 ? <button onClick={() => onWindowEvent(5)} className=\"tb_error_btn_primary\">Update Now</button> : <><button onClick={() => onWindowEvent(2)} className=\"tb_error_btn_primary\" style={{ marginRight: '10px' }}>Add Another Feed</button>\r\n                        <button onClick={() => onWindowEvent(1)} className=\"loadDemoWall tb_error_btn_secondary\">Show Demo Posts</button></>\r\n                }\r\n\r\n{/* const ErrorButtons = ({ editor, error_code }) => {\r\n    return <div className=\"tb_error_page_actions\">\r\n        <div className=\"tb_error_action_list\">\r\n            {!editor && !isPreview ? <a href={`${AppUrls}`} target={'_blank'} className=\"tb_error_btn_primary\">{isSocialWall ? `Access Now` : `Add Another Feed`}</a> \r\n            : <>\r\n                {\r\n                    error_code == 213 ? <button onClick={() => onWindowEvent(5)} className=\"tb_error_btn_primary\">Update Now</button> : <><button onClick={() => onWindowEvent(2)} className=\"tb_error_btn_primary\" style={{ marginRight: '10px' }}>Add Another Feed</button>\r\n                        <button onClick={() => onWindowEvent(1)} className=\"loadDemoWall tb_error_btn_secondary\">Show Demo Posts</button></>\r\n                } */}\r\n\r\n            </>}\r\n        </div>\r\n    </div>\r\n}\r\nexport default ErrorButtons","import ErrorBranding from \"../Elements/ErrorBranding\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport ErrorButtons from \"./ErrorButtons\";\r\nconst ErrorMessage = ({ editor, title, description, error_code,wall }) => {\r\n  return <div className=\"tb_error_page_wrapper\">\r\n    <div className=\"tb_error_content\">\r\n      <div className=\"tb_error_title\">{title}</div>\r\n      <div className=\"tb_error_des\">{ReactHtmlParser(description)}</div>\r\n      <ErrorButtons editor={editor} wall={wall} error_code={error_code} />\r\n    </div>\r\n    {!editor ? <ErrorBranding wall={wall} /> : null}\r\n  </div>\r\n}\r\nexport default ErrorMessage\r\n"],"names":["_ref","_wall$User","isLink","wall","isTagEmbedStatus","User","userDatabaseType","window","location","href","includes","logoName","isTagEmbed","isTagShop","isSocialWall","_jsx","className","children","concat","WebWidgetUrl","target","style","backgroundImage","CloudUrl","isPreview","editor","error_code","_Fragment","onClick","onWindowEvent","_jsxs","marginRight","TagembedAppUrl","AppUrls","title","description","ReactHtmlParser","ErrorButtons","ErrorBranding"],"sourceRoot":""}