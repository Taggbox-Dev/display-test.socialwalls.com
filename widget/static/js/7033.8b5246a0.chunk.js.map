{"version":3,"file":"static/js/7033.8b5246a0.chunk.js","mappings":"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","sources":["app/Themes/Elements/PostContent/PostContent.js","app/Themes/Elements/PostContent/PostContentConvertion.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { STRING_TO_URL_CONVERT } from '../../../../utils'\r\nimport { isSocialEmbed, isSocialWall, isTagEmbed } from \"../../../../actions/api\";\r\nimport ContentWithOutSlack from './PostContentConvertion'\r\n//const ContentWithOutSlack = React.lazy(() => import('./PostContentConvertion'));\r\nexport default class PostContent extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.contentRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    // if (isTagEmbed) {\r\n      setTimeout(() => {\r\n        if (this.contentRef?.current?.clientHeight) {\r\n          const contentHeight = this.contentRef?.current?.clientHeight || 0;\r\n          if (this.props.contentRefCallBack) this.props.contentRefCallBack(contentHeight)\r\n        }\r\n      }, 100);\r\n    // }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { contentClass, content, ThemeRule, font, personalization, item, contentTitle, readMore, maxLength, textAlign, maxLines, isReadMore } = this.props;\r\n    //const { expanded } = this.state\r\n    const truncateStyle = {\r\n      WebkitLineClamp: maxLines,\r\n      textAlign: ThemeRule.textAlignment\r\n    };\r\n    let contentData = item.network.id == 20 ? content : (isSocialWall && !isSocialEmbed) ? content : STRING_TO_URL_CONVERT(content);\r\n    if (item.network.id == 12) contentData = ReactHtmlParser(contentData); // for RRS but we have to change from backend.\r\n    const trimClasses = `${ThemeRule.lineTrim ? ` tb_content_line-${ThemeRule.lineTrim}` : ``}`\r\n    const contentClasses = `${contentClass} ${!isReadMore ? trimClasses : ''} tb-cTBfont-${ThemeRule.font_varient}`\r\n    return (\r\n      <div className={contentClasses} ref={this.contentRef} style={truncateStyle}>\r\n        {contentTitle ? <div className=\"tb_bold_txt__\">{ReactHtmlParser(contentTitle)}</div> : null}\r\n        <Suspense fallback={<></>}> <ContentWithOutSlack data={item} content={contentData} Personalization={personalization} ThemeRule={ThemeRule} /> </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { memo } from \"react\";\r\nimport Emojify from 'react-emojione';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nconst reactStringReplace = require(\"react-string-replace\");\r\n//import { PostTrimContent } from \"../../../../actions/themeActions\";\r\nconst convertSlackEmoji = (data, ThemeRule) => {\r\n    return <Emojify style={ThemeRule && [66, 70].includes(ThemeRule?.themeId) ? { width: (ThemeRule.fontSize), height: (ThemeRule.fontSize) } : null}>{ReactHtmlParser(data)}</Emojify>\r\n}\r\nconst ContentWithOutSlack = ({ data, content, Personalization, ThemeRule }) => {\r\n    const customHasTagStyle = {\r\n        color: Personalization.hashtag_color,\r\n        fontWeight: \"bold\",\r\n        backgroundColor: Personalization.hashtag_background_status == 1 ? Personalization.hashtag_background_color : 'transparent'\r\n    }\r\n\r\n    return data.network.id == 20 && window.slackdown ? <>\r\n        {Personalization.hashtag_highlight === 1 &&\r\n            Personalization.hashtag_feed === 0 &&\r\n            Personalization.hashtag_all === 0\r\n            ? ReactHtmlParser(content)\r\n            : Personalization.hashtag_highlight === 1 &&\r\n                Personalization.hashtag_feed === 0 &&\r\n                Personalization.hashtag_all === 1\r\n                ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\r\n                    content,\r\n                    /#(\\w+)/g,\r\n                    (match, i) => (\r\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                            #{match}\r\n                        </div>\r\n                    )\r\n                ), data.slackMember), ThemeRule)\r\n                : Personalization.hashtag_highlight === 1 &&\r\n                    Personalization.hashtag_feed === 1 &&\r\n                    Personalization.hashtag_all === 0\r\n                    ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\r\n                        content,\r\n                        data.hash.hashString,\r\n                        (match, i) => (\r\n                            <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                {match}\r\n                            </div>\r\n                        )\r\n                    ), data.slackMember), ThemeRule)\r\n                    : Personalization.hashtag_highlight === 1 &&\r\n                        Personalization.hashtag_feed === 1 &&\r\n                        Personalization.hashtag_all === 1\r\n                        ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\r\n                            content,\r\n                            /#(\\w+)/g,\r\n                            (match, i) => (\r\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                    #{match}\r\n                                </div>\r\n                            )\r\n                        ), data.slackMember), ThemeRule)\r\n                        : convertSlackEmoji(window.slackdown.parse(content, data.slackMember), ThemeRule)}\r\n    </> : <>\r\n\r\n        {Personalization.hashtag_highlight === 1 &&\r\n            Personalization.hashtag_feed === 0 &&\r\n            Personalization.hashtag_all === 0\r\n            ? ReactHtmlParser(content)\r\n            : Personalization.hashtag_highlight === 1 &&\r\n                Personalization.hashtag_feed === 0 &&\r\n                Personalization.hashtag_all === 1\r\n                ? reactStringReplace(\r\n                    ReactHtmlParser(content),\r\n                    /#(\\w+)/g,\r\n                    (match, i) => (\r\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                            #{match}\r\n                        </div>\r\n                    )\r\n                )\r\n                : Personalization.hashtag_highlight === 1 &&\r\n                    Personalization.hashtag_feed === 1 &&\r\n                    Personalization.hashtag_all === 0\r\n                    ? reactStringReplace(\r\n                        ReactHtmlParser(content),\r\n                        data.hash.hashString,\r\n                        (match, i) => (\r\n                            <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                {match}\r\n                            </strong>\r\n                        )\r\n                    )\r\n                    : Personalization.hashtag_highlight === 1 &&\r\n                        Personalization.hashtag_feed === 1 &&\r\n                        Personalization.hashtag_all === 1\r\n                        ? reactStringReplace(\r\n                            ReactHtmlParser(content),\r\n                            /#(\\w+)/g,\r\n                            (match, i) => (\r\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\r\n                                    #{match}\r\n                                </div>\r\n                            )\r\n                        )\r\n                        : convertSlackEmoji(content, ThemeRule)}\r\n    </>\r\n}\r\n\r\nexport default memo(ContentWithOutSlack);"],"names":["PostContent","PureComponent","constructor","props","super","this","contentRef","React","componentDidMount","setTimeout","_this$contentRef","_this$contentRef$curr","current","clientHeight","_this$contentRef2","_this$contentRef2$cur","contentHeight","contentRefCallBack","render","contentClass","content","ThemeRule","font","personalization","item","contentTitle","readMore","maxLength","textAlign","maxLines","isReadMore","truncateStyle","WebkitLineClamp","textAlignment","contentData","network","id","isSocialWall","isSocialEmbed","STRING_TO_URL_CONVERT","ReactHtmlParser","trimClasses","concat","lineTrim","contentClasses","font_varient","_jsxs","className","ref","style","children","_jsx","Suspense","fallback","_Fragment","ContentWithOutSlack","data","Personalization","reactStringReplace","require","convertSlackEmoji","Emojify","includes","themeId","width","fontSize","height","_ref","customHasTagStyle","color","hashtag_color","fontWeight","backgroundColor","hashtag_background_status","hashtag_background_color","window","slackdown","hashtag_highlight","hashtag_feed","hashtag_all","parse","match","i","slackMember","hash","hashString","memo"],"sourceRoot":""}