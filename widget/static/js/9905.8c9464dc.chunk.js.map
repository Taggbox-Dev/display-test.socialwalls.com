{"version":3,"file":"static/js/9905.8c9464dc.chunk.js","mappings":"qLAEA,MAAMA,EAAiBC,EAAAA,KAAW,IAAM,iCAEzB,MAAMC,UAAgBC,EAAAA,cACnCC,MAAAA,GACE,MAAM,QAAEC,EAAO,aAAEC,EAAY,UAAEC,EAAS,UAAEC,EAAS,gBAAEC,GAAoBC,KAAKC,MACxEC,IAAgBJ,IAA4B,IAAfH,EAAQQ,IAA2B,IAAfR,EAAQQ,IAA2B,KAAfR,EAAQQ,IAC7EC,EAAOC,EAAAA,IAA4B,IAAdV,EAAQQ,GAAW,WAAaR,EAAQS,KACnE,OAAQF,GAAgBI,EAAAA,EAAAA,KAAA,OAAKC,UAAS,GAAAC,OAAKZ,EAAY,iBAAAY,OAAgBJ,EAAKK,QAAQ,OAAQ,KAAMC,UAACJ,EAAAA,EAAAA,KAAA,aAAoBK,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUP,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,IAAMJ,SAAA,CAAC,KAACJ,EAAAA,EAAAA,KAAChB,EAAc,CAACK,QAASA,EAASC,aAAcA,MACrM,E,qFCRF,MAAMmB,EAAgBxB,EAAAA,KAAW,IAAM,iCAExB,MAAMyB,UAA2BvB,EAAAA,cAC5CwB,WAAAA,CAAYhB,GACRiB,MAAMjB,GAAO,KAqBjBkB,aAAe,KACX,MAAM,cAAEC,GAAkBpB,KAAKC,MAC/B,IAAIoB,EAAW,EAEf,IAAK,MAAMC,KAAOF,EACd,GAAIA,EAAcG,eAAeD,GAAM,CAEnCD,GADmBD,EAAcE,GAAK9B,QACfgC,YAC3B,CAGJ,OAAOH,GACT,KAGFI,YAAc,KACVzB,KAAKC,MAAMwB,aAAY,IApCvBzB,KAAK0B,MAAQ,CACTC,iBAAkB,EAE1B,CACAC,iBAAAA,GACI,MAAM,cAAER,GAAkBpB,KAAKC,MAC/B,IAAI4B,EAAkB,EAClBC,EAAc,EAElB,IAAK,MAAMR,KAAOF,EAAe,CAC7B,MAAMzB,EAAUyB,EAAcE,GAAK9B,QACnCqC,GAAmBlC,EAAQ6B,aAC3BM,GAAenC,EAAQ6B,aAAe7B,EAAQoC,cAClD,CAEA,GAAIF,EAAkB,EAAG,CACrB,MAAMF,EAAmBG,EAAcD,EACvC7B,KAAKgC,SAAS,CAAEL,oBACpB,CACJ,CAmBAjC,MAAAA,GACI,MAAM,UAAEG,EAAS,cAAEuB,GAAkBpB,KAAKC,OACpC,iBAAE0B,GAAqB3B,KAAK0B,MAC5BL,EAAWrB,KAAKmB,eACtB,IAAIc,EAAUC,WAAWP,GAAkBQ,QAAQ,GAEnD,OAAQxB,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,qBAAqB6B,QAASpC,KAAKyB,YAAYf,SAAA,EAClEJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeG,SACzBU,GAAiBA,EAAciB,OAAS,EAAIjB,EAAckB,IAAI,CAACC,EAAOC,KACnE,MAAMC,EAAOF,EAAM/C,QACnB,OAAOgD,EAAQ,GAAIlC,EAAAA,EAAAA,KAAA,OAAiBC,UAAU,oBAAmBG,UAC7DJ,EAAAA,EAAAA,KAACd,EAAAA,QAAO,CACJK,UAAWA,EACXD,aAAc,uBACdD,QAAS8C,EACT3C,WAAW,KALU0C,GAOpB,OACR,QAGT7B,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBG,SAAA,EAC9BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBG,SAAEuB,KACnC3B,EAAAA,EAAAA,KAACM,EAAAA,SAAQ,CAACC,UAAUP,EAAAA,EAAAA,KAAAQ,EAAAA,SAAA,IAAMJ,UACtBJ,EAAAA,EAAAA,KAACS,EAAa,CAAC2B,KAAM,GAAIC,OAAQV,UAGzCtB,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,oBAAmBG,SAAA,CAAC,YAAUW,EAAS,gBAG9D,E","sources":["app/Themes/Elements/Network/Network.js","app/Themes/Badge/Elements/AverageRatingFixed.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\nimport { isTagEmbed } from \"../../../../actions/api\";\nconst DefaultNetwork = React.lazy(() => import(\"./DefaultNetwork\"));\n\nexport default class Network extends PureComponent {\n  render() {\n    const { network, networkClass, ThemeRule, isDefault, Personalization } = this.props;\n    const isDefaultIcon = isDefault ? (network.id === 7 || network.id === 4 || network.id === 36) ? false : true : false\n    const icon = isTagEmbed && network.id == 36 ? \"tagembed\" : network.icon;\n    return (isDefaultIcon ? <div className={`${networkClass} tb__icon tb-${icon.replace(/fa-/g, \"\")}`}><div></div></div> : <Suspense fallback={<></>}> <DefaultNetwork network={network} networkClass={networkClass} /></Suspense>);\n  }\n}\n","import React, { PureComponent, Suspense } from \"react\";\nimport Network from \"../../Elements/Network/Network\";\nconst AverageRating = React.lazy(() => import('../../Elements/AverageRating/AverageRating'));\n\nexport default class AverageRatingFixed extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            averageCalcBadge: 0,\n        }\n    }\n    componentDidMount() {\n        const { reviewFilters } = this.props;\n        let totalReviewsSum = 0;\n        let weightedSum = 0;\n\n        for (const key in reviewFilters) {\n            const network = reviewFilters[key].Network;\n            totalReviewsSum += network.totalReviews;\n            weightedSum += network.totalReviews * network.averageReviews;\n        }\n\n        if (totalReviewsSum > 0) {\n            const averageCalcBadge = weightedSum / totalReviewsSum;\n            this.setState({ averageCalcBadge });\n        }\n    }\n    calculateSum = () => {\n        const { reviewFilters } = this.props;\n        let sumOfAll = 0;\n\n        for (const key in reviewFilters) {\n            if (reviewFilters.hasOwnProperty(key)) {\n                const networkObj = reviewFilters[key].Network;\n                sumOfAll += networkObj.totalReviews;\n            }\n        }\n\n        return sumOfAll;\n    };\n\n\n    togglePopup = () => {\n        this.props.togglePopup(false)\n    }\n    render() {\n        const { ThemeRule, reviewFilters } = this.props\n        const { averageCalcBadge } = this.state;\n        const sumOfAll = this.calculateSum();\n        let avgrate = parseFloat(averageCalcBadge).toFixed(1);\n\n        return (<div className=\"tb_bt_post_wrap_in\" onClick={this.togglePopup}>\n            <div className=\"tb_bt_social_\">\n                {reviewFilters && reviewFilters.length > 0 ? reviewFilters.map((items, index) => {\n                    const item = items.Network;\n                    return index < 5 ? <div key={index} className=\"tb_bt_social_list\">\n                        <Network\n                            ThemeRule={ThemeRule}\n                            networkClass={\"tb_bt_avg_social_ico\"}\n                            network={item}\n                            isDefault={true}\n                        />\n                    </div> : null\n                }) : null}\n\n            </div>\n            <div className=\"tb_bt_rating_wrap\">\n                <div className=\"tb_bt_avg_rating\">{avgrate}</div>\n                <Suspense fallback={<></>}>\n                    <AverageRating size={14} rating={avgrate} />\n                </Suspense>\n            </div>\n            <div className=\"tb_bt_review_link\">Read our {sumOfAll} reviews</div>\n        </div >\n        );\n    }\n}\n"],"names":["DefaultNetwork","React","Network","PureComponent","render","network","networkClass","ThemeRule","isDefault","Personalization","this","props","isDefaultIcon","id","icon","isTagEmbed","_jsx","className","concat","replace","children","_jsxs","Suspense","fallback","_Fragment","AverageRating","AverageRatingFixed","constructor","super","calculateSum","reviewFilters","sumOfAll","key","hasOwnProperty","totalReviews","togglePopup","state","averageCalcBadge","componentDidMount","totalReviewsSum","weightedSum","averageReviews","setState","avgrate","parseFloat","toFixed","onClick","length","map","items","index","item","size","rating"],"sourceRoot":""}