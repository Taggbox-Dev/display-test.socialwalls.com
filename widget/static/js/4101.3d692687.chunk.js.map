{"version":3,"file":"static/js/4101.3d692687.chunk.js","mappings":"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","sources":["app/Themes/Badge/index.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\r\nimport { componentWillAppendToBody } from \"react-append-to-body\";\r\nimport { connect } from 'react-redux';\r\nimport './scss/Badge.scss'\r\nimport { getDataNextSteps } from '../../../actions/themeActions'\r\nimport { isTagEmbed } from \"../../../actions/api\";\r\nconst SmallBranding = React.lazy(() => import('../Elements/Branding/SmallBranding'));\r\nconst ReviewHeader = React.lazy(() => import('../../ReviewHeader'));\r\nconst Filters = React.lazy(() => import('../../Components/Filters'));\r\nconst WidgetTheme = React.lazy(() => import('../WidgetTheme'));\r\nconst PopUpCard = React.lazy(() => import('./Elements/PopUpCard'));\r\nconst AverageRatingFixed = React.lazy(() => import('./Elements/AverageRatingFixed'));\r\nconst SeeMore = React.lazy(() => import(\"../Elements/SeeMore/SeeMore\"));\r\nconst MyComponent = ({ children, wallId }) => {\r\n  return wallId ? <div data-widget-id={wallId}>{children}</div> : null\r\n}\r\nconst AppendedView = componentWillAppendToBody(MyComponent);\r\n\r\n\r\nclass Badge extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isClickStoped: false,\r\n      isPopupVisible: false,\r\n      showFirstButton: true,\r\n      toggleSticky: false,\r\n    };\r\n    this.interval = null;\r\n  }\r\n  /*********************************************/\r\n  togglePopup = () => {\r\n    this.setState((prevState) => ({\r\n      isPopupVisible: !prevState.isPopupVisible,\r\n      showFirstButton: !prevState.showFirstButton\r\n    }));\r\n  };\r\n\r\n  toggleDivs = () => {\r\n    this.setState((prevState) => ({\r\n      toggleSticky: prevState.isClickStoped ? false : !prevState.toggleSticky\r\n    }));\r\n  };\r\n  /************************************************/\r\n\r\n\r\n  componentDidMount() {\r\n    /* Start the interval to toggle the divs every 5 seconds */\r\n    this.interval = setInterval(this.toggleDivs, 10000);\r\n    let wallEditor = document.getElementById(\"BadgeThemeScroll\")\r\n    if (wallEditor) wallEditor.addEventListener(\"scroll\", this.autoLoadEditorScrollData);\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n  autoLoadEditorScrollData = event => {\r\n    const { wall, appendData, loaderData } = this.props;\r\n    const postCount = wall.ThemeRule.numberOfPosts;\r\n    if (wall.Personalization.autoScrollStatus === 1) {\r\n      let wallEditor = document.getElementById(\"BadgeThemeScroll\");\r\n      if (wallEditor) {\r\n        let documentHeight = document.body.scrollHeight;\r\n        let scrollTop = wallEditor.scrollTop;\r\n        let scrollHeight = wallEditor.scrollHeight;\r\n        if (scrollTop + wallEditor.clientHeight >= scrollHeight - 10) {\r\n          if (!(loaderData && loaderData.isShowMoreLoading)) {\r\n            const timeStamp = Math.floor(Date.now() / 1000);\r\n\r\n            // Call the function to load more data\r\n            this.props.getDataNextSteps(\r\n              wall.Wall.id,\r\n              timeStamp,\r\n              postCount,\r\n              appendData.networkID,\r\n              appendData.after,\r\n              appendData.heightEvent\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { postData, completeDataObject, adjustWidth, wall, reviewFilters, languageSetting, appendData, appData, filter_tags, webFilters, isFreeAdsStatus } = this.props;\r\n    const { isPopupVisible, showFirstButton, toggleSticky } = this.state;\r\n    const headerPositionTop = wall.Banner && Object.keys(wall.Banner).length > 0 && ((wall.Banner.status === 1 && wall.Banner.banner_position === 1) || wall.BannerImage.status === 1) ? true : false;\r\n    const headerPositionBottom = wall.Banner && Object.keys(wall.Banner).length > 0 && wall.Banner.status === 1 && wall.Banner.banner_position === 2 ? true : false;\r\n    const isReviewBanner = wall.Banner && Object.keys(wall.Banner).length > 0 && wall.Banner.status === 1 && wall.Banner.bannerType == 6 ? true : false\r\n    const web_Filter_Status = isTagEmbed ? wall.Personalization.filterStatus === 1 ? true : false : webFilters && webFilters.length > 1 ? true : false;\r\n    <Suspense fallback={<></>}><Filters type={wall.Personalization.filter_type} webFilters={webFilters} filter_tags={filter_tags} appendData={postData.appendData} wall={wall} languageSetting={languageSetting} postData={postData} /></Suspense>\r\n\r\n    const backgroundStyle = wall?.Background?.transparent === 0 || (wall?.Background?.image && isTagEmbed) ? {\r\n      backgroundImage: (wall?.Background?.image) ? `url(${wall?.Background?.image})` : '',\r\n      backgroundColor: wall?.Background?.color\r\n    } : null\r\n\r\n    const displayStyle = !isPopupVisible ? { display: 'none' } : null;\r\n\r\n    const combinedStyle = { ...backgroundStyle, ...displayStyle };\r\n    \r\n    const result = Object.keys(completeDataObject).map((key) => completeDataObject[key]);\r\n    const cardData = result.sort(() => Math.random() - Math.random())\r\n      .find(() => true);\r\n    return <div className=\"tb_bt__container\">\r\n\r\n      <AppendedView wallId={wall?.Wall?.id}>\r\n\r\n        {<div className={`tb_bt_popup_wrapper tb_bt_popup_show`} style={combinedStyle}>\r\n          <div className=\"tb_bt_popup_close_btn\" onClick={this.togglePopup}>\r\n            <div className=\"tb_bt_popup_close_ico tb__icon tb-close-alt\"></div>\r\n          </div>\r\n          <div className=\"tb_bt_head_title\">What our customer say</div>\r\n          <div className=\"tb_bt_post_wrap\" id=\"BadgeThemeScroll\">\r\n            {isReviewBanner && headerPositionTop ? <Suspense fallback={<></>}><ReviewHeader reviewFilters={reviewFilters} wall={wall} appendData={appendData} languageSetting={languageSetting} /></Suspense> : null}\r\n            {web_Filter_Status ? <Suspense fallback={<></>}><Filters type={wall.Personalization.filter_type} webFilters={webFilters} filter_tags={filter_tags} appendData={appendData} wall={wall} languageSetting={languageSetting} postData={postData} /></Suspense> : null}\r\n\r\n            <Suspense fallback={<></>}>\r\n              <WidgetTheme {...this.props} /></Suspense>\r\n            {wall.Personalization.loadMoreStatus === 1 ? <Suspense fallback={<></>}><SeeMore languageSetting={languageSetting} wall={wall} appendData={appendData} postData={appData.postData} /></Suspense> : null}\r\n            {isReviewBanner && headerPositionBottom ? <Suspense fallback={<></>}><ReviewHeader reviewFilters={reviewFilters} wall={wall} appendData={appendData} languageSetting={languageSetting} /></Suspense> : null}\r\n          </div>\r\n        </div>}\r\n      </AppendedView>\r\n\r\n      <div className=\"tb_bt_wrapper\">\r\n        {showFirstButton &&\r\n          <div className=\"tb_bt_post_wrapper\">\r\n\r\n            {!toggleSticky ?\r\n              <>\r\n                <div className={`tb_bt_average_sticky ${!toggleSticky ? 'tb_bt_show' : ''}`}>\r\n                  <Suspense fallback={<></>}>\r\n                    <AverageRatingFixed ThemeRule={wall.ThemeRule} reviewFilters={reviewFilters} togglePopup={this.togglePopup} />\r\n                  </Suspense>\r\n                </div>\r\n\r\n                {isFreeAdsStatus ? <Suspense fallback={<></>}><SmallBranding languageSetting={languageSetting} wallId={wall.Wall.id} themeID={wall.Personalization.widgetTheme} /> </Suspense> : null}\r\n              </>\r\n              : null}\r\n\r\n            {postData && postData.length > 0 && toggleSticky &&\r\n              <div className={`tb_bt_post_contain ${toggleSticky ? 'tb_bt_show' : ''}`}>\r\n                <Suspense key={cardData.id} fallback={<></>}>\r\n                  <PopUpCard\r\n                    ownerId={wall.Wall.owner}\r\n                    itemData={cardData}\r\n                    key={cardData.id}\r\n                    itemIndex={cardData.id}\r\n                    adjustWidth={adjustWidth}\r\n                    personalization={wall.Personalization}\r\n                    ThemeRule={wall.ThemeRule}\r\n                    wallID={wall.Wall.id}\r\n                    toggleDivs={this.toggleDivs}\r\n                  /></Suspense>\r\n              </div>\r\n            }\r\n\r\n          </div>}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    appData: state.appData,\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getDataNextSteps: (wallID, timeStamp, postCount, networkId, after, heightEvent, updateInStateNow) => dispatch(getDataNextSteps(wallID, timeStamp, postCount, networkId, after, heightEvent, updateInStateNow))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Badge);"],"names":["SmallBranding","React","ReviewHeader","Filters","WidgetTheme","PopUpCard","AverageRatingFixed","SeeMore","AppendedView","componentWillAppendToBody","_ref","children","wallId","_jsx","Badge","PureComponent","constructor","props","super","togglePopup","this","setState","prevState","isPopupVisible","showFirstButton","toggleDivs","toggleSticky","isClickStoped","autoLoadEditorScrollData","event","wall","appendData","loaderData","postCount","ThemeRule","numberOfPosts","Personalization","autoScrollStatus","wallEditor","document","getElementById","body","scrollHeight","scrollTop","clientHeight","isShowMoreLoading","timeStamp","Math","floor","Date","now","getDataNextSteps","Wall","id","networkID","after","heightEvent","state","interval","componentDidMount","setInterval","addEventListener","componentWillUnmount","clearInterval","render","_wall$Background","_wall$Background2","_wall$Background3","_wall$Background4","_wall$Background5","_wall$Wall","postData","completeDataObject","adjustWidth","reviewFilters","languageSetting","appData","filter_tags","webFilters","isFreeAdsStatus","headerPositionTop","Banner","Object","keys","length","status","banner_position","BannerImage","headerPositionBottom","isReviewBanner","bannerType","web_Filter_Status","isTagEmbed","filterStatus","Suspense","_Fragment","filter_type","combinedStyle","Background","transparent","image","backgroundImage","concat","backgroundColor","color","display","cardData","map","key","sort","random","find","_jsxs","className","style","onClick","fallback","type","loadMoreStatus","themeID","widgetTheme","ownerId","owner","itemData","itemIndex","personalization","wallID","connect","dispatch","networkId","updateInStateNow"],"sourceRoot":""}