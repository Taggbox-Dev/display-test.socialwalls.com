{"version":3,"file":"static/js/2165.e6c12394.chunk.js","mappings":"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","sources":["app/Components/UserComponents/ReviewHub/Components/uppyUpload.js","app/Components/UserComponents/ReviewHub/Components/Uploads.js"],"sourcesContent":["import Uppy from '@uppy/core';\nimport Transloadit from '@uppy/transloadit';\nimport { suiteTrack, isTagShop, isSocialWall } from '../../../../../actions/api';\n\nconst uppyKey = '0701d3d7f8d94e92a65a9cba388b1d96';\nconst uppyBucket = isTagShop ? 'cloud.tagshop.ai' : isSocialWall ? 'cloud.socialwalls.com' : 'cloud.tagbox.com';\nconst uppyAwsKey = '47ABVORKG52UYE1KB28S';\nconst uppyAwsSecret = 'pcaTfeokaz28geAAns08H3yaGbOVz6ILgTptu19v';\n\n\nclass UppyUpload {\n    constructor(beforeFileAdded, beforeUpload, limit) {\n        let uploadPath = 'media/tmpimages/';\n        let bucket = uppyBucket;\n        if (suiteTrack) {\n            uploadPath = `ugc-suite/tmp/`;\n            bucket = 'cloud.tagbox.com';\n        }\n        if (isTagShop) {\n            uploadPath = `tmp/`;\n        }\n        this.uppy = new Uppy({\n            meta: { type: 'avatar' },\n            autoProceed: true,\n            debug: true,\n            allowMultipleUploads: true,\n            restrictions: {\n                maxFileSize: 104857600,\n                maxNumberOfFiles: limit ? limit : 1,\n                minNumberOfFiles: 1,\n                allowedFileTypes: ['image/*', 'video/*']\n            },\n            onBeforeFileAdded: beforeFileAdded,\n            onBeforeUpload: beforeUpload\n        })\n\n        this.uppy.use(Transloadit, {\n            params: {\n                auth: {\n                    key: uppyKey\n                },\n                steps: {\n                    store: {\n                        robot: '/wasabi/store',\n                        bucket_region: \"us-west-1\",\n                        result: true,\n                        bucket: bucket,\n                        key: uppyAwsKey,\n                        secret: uppyAwsSecret,\n                        path: uploadPath + '${file.id}.${file.ext}'\n                    }\n                }\n            },\n            waitForEncoding: true\n            // }).use(Compressor, {\n            //     quality: 0.8\n        });\n    }\n}\n\nexport default UppyUpload;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { DragDrop, StatusBar, FileInput, Dashboard } from '@uppy/react';\nimport '@uppy/core/dist/style.css'\nimport UppyUpload from './uppyUpload'\nimport { suiteTrack, VIDEO_COMPRESS, isTagShop, isSocialWall } from '../../../../../actions/api'\nimport { bytesToSize, tb_onsite_btn_disabled } from '../../../../../utils'\nimport { CloudHostUrl } from '../../../../../constants'\nimport _ from \"lodash\";\n\n\nexport const Loader = ({ value, isBar }) => {\n    const progress = Math.round(3.14 * (78 / 2 - 10) * 2 * ((100 - value) / 100));\n    return isBar ?\n        <div className='t_m_pb_wrap'>\n            <div className='t_m_pb' style={{ width: `${value}%` }}><div></div></div>\n        </div>\n        :\n        <div className='t_m_propgress'>\n            <svg width=\"78\" height=\"78\" viewBox=\"-10 -10 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style={{ transform: 'rotate(-90deg)' }}>\n                <circle r=\"30\" cx=\"40\" cy=\"40\" fill=\"transparent\" stroke=\"#D9D9D9\" strokeWidth=\"4\" strokeDasharray=\"188.4px\" strokeDashoffset=\"0\"></circle>\n                <circle id='path_fr_circle' r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#545454\" strokeWidth=\"4\" strokeLinecap=\"butt\" strokeDashoffset={`${progress}px`} fill=\"transparent\" strokeDasharray=\"188.4px\"></circle>\n                <text x=\"25px\" y=\"47px\" fill=\"#545454\" fontSize=\"14px\" style={{ transform: 'rotate(90deg) translate(17px, -84px)' }} textAnchor=\"middle\" dominantBaseline=\"middle\">{value}%</text>\n            </svg>\n        </div>\n}\n\nlet videoFiles = []\nlet totalFiles = []\nclass Uploads extends Component {\n    state = {\n        isLoading: false,\n        selectedFile: null,\n        selectedUrl: null,\n        type: null,\n        thumb_file: [],\n        fileSize: false,\n        filemaxSize: 0,\n        throwError: false,\n        videoPath: \"\",\n        fileSizeText: \"\",\n        ext: null, size: 0,\n        fileName: null,\n        mediaHeight: 0,\n        mediaWidth: 0,\n        uploadPercent: 100,\n        limit: 20,\n        uploadedFiles: []\n    }\n    beforeFileAdded = (currentFile, files) => {\n        if(totalFiles.length > 0) {\n            const exists = totalFiles.find(file => file.id == currentFile.id)\n            if(exists) return false\n        }\n        tb_onsite_btn_disabled(1)\n        const { size, sizeText } = bytesToSize(currentFile.size);\n        if (['GB', 'TB'].includes(sizeText)) {\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\n            this.setState({ type: fileType, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\n                this.onLoadError(fileType)\n                setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\" }), 2000)\n            })\n            tb_onsite_btn_disabled(2)\n        }\n        else if (sizeText == \"MB\" ) {\n\n            const fileType = currentFile.meta.type.includes('image') ? 4 : 5;\n            const maxuploadSize = fileType == 4 ? 15 : 100;\n\n            if (size >= maxuploadSize) {\n\n                this.setState({ type: fileType, filemaxSize: maxuploadSize, fileSize: true, fileSizeText: `${size}${sizeText}` }, () => {\n                    this.onLoadError(fileType)\n                    setTimeout(() => this.setState({ fileSize: false, fileSizeText: \"\", type: null }, () => this.onLoadError(fileType)), 5000)\n                })\n                tb_onsite_btn_disabled(2)\n\n                return false\n            }\n            else if (fileType == 5){\n                \n                if(totalFiles.length <20){\n                    videoFiles.push(currentFile)\n                    totalFiles.push(currentFile)\n                }\n                \n            }\n            else {\n                if(totalFiles.length <20){\n                    totalFiles.push(currentFile)\n                }\n                //return true\n            }\n        }\n        else if(sizeText == 'KB' && currentFile.meta.type.includes('image') && totalFiles.length<20){\n            totalFiles.push(currentFile)\n            //return true\n        }\n    }\n\n    beforeUpload = (files) => {\n        this.props.checkUpload(true)\n        for (const file of totalFiles) {\n            if (file.meta.type.includes('video')) {\n            this.videoProcess()\n              break;\n            }\n        }\n\n        this.setState({ isLoading: true })\n        return Object.fromEntries(\n            Object.entries(files).filter(([fileId, file]) => !file.meta.type.includes('video'))\n        );\n    }\n\n    videoProcess = () => {\n        if(videoFiles.length > 0 && totalFiles.length<=20) {\n            try {\n                const { onsite_token } = this.props;\n                this.setState({isLoading:true})\n                const updateFiles = videoFiles[0];\n                const data = new FormData();\n                data.append(\"file\", updateFiles.data);\n                data.append(\"onsite_token\", onsite_token);\n                const config = {\n                    headers: { productdomain: `taggbox.com` },\n                    onUploadProgress: (progressEvent) => {\n                        const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n                        this.setState({\n                            uploadPercent: percent, isLoading:true\n                        })\n                        \n                        // Update Uppy progress manually\n                        \n                    }\n                };\n                axios.post(VIDEO_COMPRESS, data, config).then((response) => {\n                    const { responseData } = response.data;\n                    if (responseData && responseData.length > 0) {\n                        this.setState(prevState => ({\n                            videoPath: responseData[0].sscode,\n                            isLoading: false,\n                            type: 5,\n                            selectedFile: responseData[0].s3Url,\n                            selectedUrl: responseData[0].s3Url,\n                            thumb_file: responseData[0].s3ThumbUrl,\n                            ext: updateFiles.extension,\n                            size: updateFiles.size,\n                            fileName: updateFiles.name,\n                            mediaHeight: responseData[0].height,\n                            mediaWidth: responseData[0].width,\n                            uploadedFiles: [...prevState.uploadedFiles, {name:updateFiles.name, url:responseData[0].s3Url, id:updateFiles.id}]\n                        }), () => {\n                            this.onUpdateLocalState();\n                            videoFiles.shift()\n                            this.videoProcess()\n                        })\n                        tb_onsite_btn_disabled(2)\n                        this.props.checkUpload(false)\n                    }\n                }).catch((error) => {\n                    totalFiles = totalFiles.filter(file => file.id != updateFiles.id)\n                    this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n                    tb_onsite_btn_disabled(2)\n                    this.props.checkUpload(false)\n\n                })\n            }\n            catch (ex) {\n                this.videoProcess()\n                this.setState({ isLoading: false, throwError: true }, () => setTimeout(() => this.setState({ throwError: false }), 2000))\n                this.uppyUploader.uppy.cancelAll()\n                tb_onsite_btn_disabled(2)\n                this.props.checkUpload(false)\n            }\n        }\n        // else {\n\n        // }\n    }\n\n    uppyUploader = new UppyUpload(this.beforeFileAdded, this.beforeUpload, this.state.limit)\n\n    componentDidMount() {\n        this.uppyUploader.uppy.on('transloadit:result', (stepName, result) => {\n            this.setState({ isLoading: false })\n            const height = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.width : result.meta.height;\n            const width = result.meta.orientation && result.meta.orientation == \"Rotate 90 CW\" ? result.meta.height : result.meta.width;\n            let uploadPath = `${CloudHostUrl}media/tmpimages/`;\n            if (suiteTrack) uploadPath = `https://cloud.tagbox.com/ugc-suite/tmp/`;\n            if (isTagShop) uploadPath = `https://cloud.tagshop.ai/tmp/`;\n            if(isSocialWall) uploadPath = `https://cloud.socialwalls.com/media/tmpimages/`;\n            this.setState(prevState=>({\n                type: result.mime.includes(\"video\") ? 5 : 4, selectedFile: result.id, selectedUrl: `${uploadPath}${result.id}.${result.ext}`, ext: result.ext, size: result.size, fileName: result.name, mediaHeight: height,\n                mediaWidth: width, uploadedFiles: [...prevState.uploadedFiles, {name:result.name, url:`${uploadPath}${result.id}.${result.ext}`, id:result.localId}]\n            }), () => this.onUpdateLocalState())\n            tb_onsite_btn_disabled(2)\n        })\n        this.uppyUploader.uppy.on('file-removed', (file, reason) => {\n            tb_onsite_btn_disabled(2)\n        })\n        this.uppyUploader.uppy.on('upload-progress', (file, progress) => {\n            this.setState({ uploadPercent: ((progress.bytesUploaded / progress.bytesTotal) * 100).toFixed() })\n        })\n        this.uppyUploader.uppy.on('upload-error', (file, error) => {\n            this.setState({\n                throwError: true\n            })\n        });\n        this.uppyUploader.uppy.on('upload-complete', (result, error) => {\n            this.onRemovedState(true)\n        });\n    }\n    onRemovedState = (isStatus) => {\n        const { type } = this.state\n        this.setState({\n            selectedFile: null,\n            selectedUrl: null,\n            type: null,\n            thumb_file: \"\",\n            fileSize: false,\n            fileSizeText: \"\",\n            videoPath: \"\",\n            ext: null, size: 0, fileName: null, mediaHeight: 0, mediaWidth: 0\n        }, () => {\n            this.onLoadError(type)\n            if (isStatus) this.uppyUploader.uppy.cancelAll()\n        })\n    }\n\n    onUpdateLocalState = () => {\n        const { addPostImage, isActiveIndex } = this.props;\n        const { selectedUrl, type, thumb_file, videoPath, ext, size, fileName, mediaHeight, mediaWidth, uploadedFiles } = this.state;\n        addPostImage(selectedUrl, type === 5 ? thumb_file : selectedUrl, videoPath, type, isActiveIndex, ext, size, fileName, mediaHeight, mediaWidth)\n        if (type === 5) this.onRemovedState(false)\n    }\n\n    onLoadError = (type) => {\n        const { uploadErrorCallback } = this.props\n        const { fileSize, fileSizeText, filemaxSize, throwError } = this.state\n        const error = fileSize ? `File Size (${fileSizeText}) Limit Exceeded ${type == 4 ? 'Image' : 'Video'} Size : Max ${filemaxSize} MB` : ''\n        const error2 = throwError ? 'Something went wrong , Please try again.' : ''\n        uploadErrorCallback(error ? error : error2 ? error2 : '')\n    }\n\n    componentDidUpdate(prevProps){\n        const { removedFile } = this.props\n        const {uploadedFiles} = this.state\n        if(!_.isEqual(removedFile, prevProps.removedFile)){\n            if(totalFiles.length > 0) {\n                const checkFile =  uploadedFiles.find(file => file.url == removedFile.file)\n                if(checkFile && Object.keys(checkFile).length > 0){\n                    if(removedFile.type!=5) this.uppyUploader.uppy.cancelAll()                        \n                    const fileToRemove = totalFiles.find(file => file.id == checkFile.id);\n                    if (fileToRemove) {\n                        totalFiles = totalFiles.filter(file => file.id !== fileToRemove.id);\n                    }\n                    this.setState(prevState => ({ uploadedFiles: prevState.uploadedFiles.filter(file => file.url !== removedFile.file)}))\n                }\n            } \n        }\n    }\n\n    render() {\n        const { isLoading, fileSize, throwError, fileSizeText, filemaxSize, type, uploadPercent, limit } = this.state;\n        const { upload_image, formLanguage } = this.props\n        return upload_image && upload_image.length < 20 ? <>\n            <div className={`t_m_upload ${upload_image && upload_image.length < 1 ? 't_m_dd' : ''}`}>\n                <div className='t_m_up_wrp'>\n                    {upload_image && upload_image.length < 1 ?\n                        <>\n                            <DragDrop\n                                note= {formLanguage?.Video_size ?? `Video Size : Max 100MB | Photo Size : Max 15MB | Max 20 Posts`}\n                                uppy={this.uppyUploader.uppy}\n                                inline={true}\n                                maxNumberOfFiles={limit}\n                                width={'100%'}\n                                height={'auto'}\n                                locale={{\n                                    strings: {\n                                        // Text to show on the droppable area.\n                                        // `% { browse }` is replaced with a link that opens the system file selection dialog.\n                                        dropHereOr: formLanguage?.Drag_video ?? `Drag a video / image to upload (optional)`,\n                                        // Used as the label for the link that opens the system file selection dialog.\n                                        browse: '',\n                                    },\n                                }}\n                            />\n                            {isLoading ?\n                                <Loader value={uploadPercent} isBar={true} />\n                                : null}\n                        </>\n                        :\n                        isLoading ?\n                            <Loader value={uploadPercent} isBar={false} />\n                            :\n                            <>\n                                <FileInput\n                                    uppy={this.uppyUploader.uppy}\n                                    allowMultipleFiles={true}\n                                    locale={{\n                                        strings: {\n                                            // Text to show on the droppable area.\n                                            // `% { browse }` is replaced with a link that opens the system file selection dialog.\n                                            //dropHereOr: 'Drag a video / image to upload (optional)',\n                                            // Used as the label for the link that opens the system file selection dialog.\n                                            browse: 'browse',\n                                        },\n                                    }}\n                                />\n                                {/* <div className='t_m_p_ico'><div className={`tb__icon tb-close-thin tb-plus_icon`}><div></div></div></div> */}\n                            </>\n                    }\n                </div>\n            </div>\n        </> : null\n    }\n}\n\nexport default Uploads;"],"names":["uppyBucket","isTagShop","isSocialWall","constructor","beforeFileAdded","beforeUpload","limit","uploadPath","bucket","suiteTrack","this","uppy","Uppy","meta","type","autoProceed","debug","allowMultipleUploads","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","onBeforeFileAdded","onBeforeUpload","use","Transloadit","params","auth","key","steps","store","robot","bucket_region","result","secret","path","waitForEncoding","Loader","_ref","value","isBar","progress","Math","round","_jsx","className","children","style","width","concat","_jsxs","height","viewBox","version","xmlns","transform","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","id","strokeLinecap","x","y","fontSize","textAnchor","dominantBaseline","videoFiles","totalFiles","Uploads","Component","arguments","state","isLoading","selectedFile","selectedUrl","thumb_file","fileSize","filemaxSize","throwError","videoPath","fileSizeText","ext","size","fileName","mediaHeight","mediaWidth","uploadPercent","uploadedFiles","currentFile","files","length","find","file","tb_onsite_btn_disabled","sizeText","bytesToSize","includes","fileType","setState","onLoadError","setTimeout","maxuploadSize","push","props","checkUpload","videoProcess","Object","fromEntries","entries","filter","_ref2","fileId","onsite_token","updateFiles","data","FormData","append","config","headers","productdomain","onUploadProgress","progressEvent","percent","loaded","total","axios","VIDEO_COMPRESS","then","response","responseData","prevState","sscode","s3Url","s3ThumbUrl","extension","name","url","onUpdateLocalState","shift","catch","error","ex","uppyUploader","cancelAll","UppyUpload","onRemovedState","isStatus","addPostImage","isActiveIndex","uploadErrorCallback","error2","componentDidMount","on","stepName","orientation","CloudHostUrl","mime","localId","reason","bytesUploaded","bytesTotal","toFixed","componentDidUpdate","prevProps","removedFile","_","checkFile","keys","fileToRemove","render","_formLanguage$Video_s","_formLanguage$Drag_vi","upload_image","formLanguage","_Fragment","DragDrop","note","Video_size","inline","locale","strings","dropHereOr","Drag_video","browse","FileInput","allowMultipleFiles"],"sourceRoot":""}