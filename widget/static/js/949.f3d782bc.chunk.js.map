{"version":3,"file":"static/js/949.f3d782bc.chunk.js","mappings":"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","sources":["app/Components/Spotlight/index.js","app/Themes/Elements/PostContent/PostContentConvertion.js","app/Themes/Elements/Network/Network.js","app/Themes/Elements/Time/Time.js","app/Themes/Elements/Author/Elements/AuthorAvatar.js","app/Themes/Elements/Author/Author.js","app/Themes/Elements/PostContent/PostContent.js"],"sourcesContent":["import React, { Component, memo } from 'react';\nimport ReactPlayer from \"react-player\"\nimport { CloudHostUrl } from '../../../constants';\nimport PostContent from '../../Themes/Elements/PostContent/PostContent';\nimport AuthorDetails from './Elements/AuthorDetails';\nimport './scss/spotlight.scss'\nimport { getImageWidthHeight, setIntervalFunction } from '../../../utils';\nimport _ from \"lodash\";\nconst mediaReplaceText = (mediaUrl, networkId) => {\n    switch (networkId) {\n        case 25:\n            const soundCloud = String(mediaUrl).replace(\"https://w.soundcloud.com/player/?url=\", \"\")\n            return soundCloud\n            break;\n\n        default:\n            return mediaUrl\n            break;\n    }\n\n}\nclass Spotlight extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageError: false,\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight,\n            mediaSize: { height: 400, width: 400 },\n            animate: false,\n            itemData: null,\n            isPlaying: false\n        };\n    }\n    componentDidMount() {\n        this.onLoadAnimation()\n    }\n    handlePlay = () => {\n        this.setState({ isPlaying: true });\n    };\n\n    componentDidUpdate(prevProps) {\n        if (!_.isEqual(prevProps.itemData, this.props.itemData)) {\n            this.setState({\n                itemData: this.props.itemData,\n                animate: false,\n            })\n            this.onLoadAnimation()\n        }\n    }\n    onLoadAnimation() {\n        setTimeout(() => {\n            this.setState({\n                animate: true,\n            })\n            this.onMediaLoad(this.props.itemData);\n        }, 1000);\n    }\n\n    onMediaLoad = async (modalData) => {\n        if (modalData.mediaHeight && modalData.mediaWidth) {\n            this.setState({ mediaSize: { height: modalData.mediaHeight, width: modalData.mediaWidth } })\n        } else {\n            try {\n                const { width, height } = await getImageWidthHeight(modalData.postFile);\n                this.setState({ mediaSize: { height: height, width: width } })\n            } catch (error) {\n                this.setState({ mediaSize: { height: 100, width: 100 } })\n            }\n        }\n    }\n    render() {\n        const { itemData, wall } = this.props\n        const { imageError, windowHeight, windowWidth, mediaSize, animate, isPlaying } = this.state;\n        const lineClamp = windowWidth > windowHeight ? ((windowHeight - 400) / 50).toFixed() : (((windowHeight / 2) - 200) / 50).toFixed()\n        const mediaType = itemData.type !== 1 ? true : false;\n        const isVideo = itemData.type === 3 || itemData.type === 5 ? true : false\n        let mediaFile = `${itemData.postFile}`;\n\n        const isMediaFile = !imageError && itemData.mediaFile != \"\" ? true : false;\n        const onlyMedia = isMediaFile && (itemData.type != 1 || itemData.type != 4) ? true : false\n        var lineClamp_ = onlyMedia ? lineClamp : lineClamp * 2\n\n        const scale = Math.min(windowWidth / mediaSize.width, windowHeight / mediaSize.height);\n        const height = mediaSize.height * scale\n        const width = mediaSize.width * scale\n        const paddingBottom = { paddingBottom: `${(height * 100) / width}%` }\n\n        if (itemData.mediaFile.includes(CloudHostUrl)) mediaFile = itemData.postFile;\n        return <div id=\"spotlight__\" className=\"sl_container\">\n            <div className={`sl_overlay_ ${animate ? 'sl_media_ani' : ''}`} style={{ backgroundImage: `url(${mediaFile})` }}></div>\n            <div className=\"sl_wrap\">\n                <div className={`sl_wrap_row sl_only_text`}>\n                    {mediaType ?\n                        <div className={`sl_media_wrap ${animate ? 'sl_media_ani' : ''}`} style={{ maxWidth: width }}>\n                            {isVideo ?\n                                <div className=\"sl_media_wrap_\" style={paddingBottom}>\n                                    {!isPlaying && (\n                                        <img\n                                            src={itemData.postFile}\n                                            alt=\"Video Poster\"\n                                            style={{\n                                                position: \"absolute\",\n                                                top: 0,\n                                                left: 0,\n                                                width: \"100%\",\n                                                height: \"100%\",\n                                                objectFit: \"cover\",\n                                                cursor: \"pointer\",\n                                                zIndex: 1,\n                                            }}\n                                            onLoad={this.handlePlay}\n                                        />\n                                    )}\n                                    <ReactPlayer\n                                        url={mediaReplaceText(itemData.mediaUrl, itemData.networkId)}\n                                        config={{\n                                            facebook: {\n                                                appId: '117029975354072',\n                                                attributes: {\n                                                    'data-width': 'auto',\n                                                    muted: true,\n                                                    poster: itemData.postFile\n                                                }\n                                            },\n                                            file: {\n                                                forceVideo: true,\n\n                                                attributes: {\n                                                    muted: true,\n                                                    poster: itemData.postFile\n                                                }\n                                            }\n                                        }}\n                                        className=\"sl_media_\"\n                                        loop={true}\n                                        autoPlay={true}\n                                        muted={true}\n                                        volume={1}\n                                        playsinline={true}\n                                        playing={true}\n                                        height={'100%'}\n                                        width={'100%'}\n                                        controls={false}\n                                    />\n                                </div>\n                                :\n                                <div className=\"sl_media_wrap_\" style={paddingBottom}>\n                                    <img className=\"sl_media_\" src={itemData.postFile} height={height} width={width} />\n                                </div>\n                            }\n                        </div>\n                        : null}\n\n                    {/* <div className=\"sl_content_wrap\" ref={this.contentRef}>\n                            <div className=\"sl_content_in\">\n                                <PostContent contentClass={`sl_content sl_con_line-${lineClamp_}`} item={itemData} content={itemData.content} font={ThemeRule} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} />\n                            </div>\n                        </div> */}\n\n                    {/* <div className='sl_content'>\n                            <AuthorDetails mediaType={personalization.mediaType} itemData={itemData.id} postTime={itemData.createdAt} author={itemData.author} network={itemData.network} font={ThemeRule} personalization={personalization} ThemeRule={ThemeRule} />\n                    </div> */}\n\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default memo(Spotlight)","import React, { memo } from \"react\";\nimport Emojify from 'react-emojione';\nimport ReactHtmlParser from 'react-html-parser';\nconst reactStringReplace = require(\"react-string-replace\");\n//import { PostTrimContent } from \"../../../../actions/themeActions\";\nconst convertSlackEmoji = (data, ThemeRule) => {\n    return <Emojify style={ThemeRule && [66, 70].includes(ThemeRule?.themeId) ? { width: (ThemeRule.fontSize), height: (ThemeRule.fontSize) } : null}>{ReactHtmlParser(data)}</Emojify>\n}\nconst ContentWithOutSlack = ({ data, content, Personalization, ThemeRule }) => {\n    const customHasTagStyle = {\n        color: Personalization.hashtag_color,\n        fontWeight: \"bold\",\n        backgroundColor: Personalization.hashtag_background_status == 1 ? Personalization.hashtag_background_color : 'transparent'\n    }\n\n    return data.network.id == 20 && window.slackdown ? <>\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                    content,\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </div>\n                    )\n                ), data.slackMember), ThemeRule)\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                        content,\n                        data.hash.hashString,\n                        (match, i) => (\n                            <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </div>\n                        )\n                    ), data.slackMember), ThemeRule)\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                            content,\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </div>\n                            )\n                        ), data.slackMember), ThemeRule)\n                        : convertSlackEmoji(window.slackdown.parse(content, data.slackMember), ThemeRule)}\n    </> : <>\n\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? reactStringReplace(\n                    ReactHtmlParser(content),\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </div>\n                    )\n                )\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? reactStringReplace(\n                        ReactHtmlParser(content),\n                        data.hash.hashString,\n                        (match, i) => (\n                            <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </strong>\n                        )\n                    )\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? reactStringReplace(\n                            ReactHtmlParser(content),\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </div>\n                            )\n                        )\n                        : convertSlackEmoji(content, ThemeRule)}\n    </>\n}\n\nexport default memo(ContentWithOutSlack);","import React, { PureComponent, Suspense } from \"react\";\nimport { isTagEmbed } from \"../../../../actions/api\";\nconst DefaultNetwork = React.lazy(() => import(\"./DefaultNetwork\"));\n\nexport default class Network extends PureComponent {\n  render() {\n    const { network, networkClass, ThemeRule, isDefault, Personalization } = this.props;\n    const isDefaultIcon = isDefault ? (network.id === 7 || network.id === 4 || network.id === 36) ? false : true : false\n    const icon = isTagEmbed && network.id == 36 ? \"tagembed\" : network.icon;\n    return (isDefaultIcon ? <div className={`${networkClass} tb__icon tb-${icon.replace(/fa-/g, \"\")}`}><div></div></div> : <Suspense fallback={<></>}> <DefaultNetwork network={network} networkClass={networkClass} /></Suspense>);\n  }\n}\n","import React, { memo, useMemo } from \"react\";\nimport { timeAgo } from '../../../../utils'\nconst Time = (props) => {\n  const { postTime, timeClass } = props;\n  return <div className={timeClass}>{timeAgo(postTime)}</div>\n}\n\nexport default memo(Time)","import React, { memo } from 'react';\nconst AuthorAvatar = ({ username, network, authorClass, errorPic }) => {\n    const background = network.color == '#ffffff' ? '#000' : network.color\n    return <img className={`${authorClass}__`} src={errorPic ? errorPic : `https://ui-avatars.com/api/?name=${username.replace(/\\s/g, '')}&background=${String(network.id === null ? `#000` : background).replace(\"#\", '')}&color=fff&length=1`} alt={username} width={45} height={45} />\n}\n\nexport default memo(AuthorAvatar);","import React, { PureComponent } from \"react\";\nimport { GET_MEDIA_NAME } from \"../../../../utils\";\nimport AuthorAvatar from \"./Elements/AuthorAvatar\";\n\n\nexport default class Author extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAuthorImagevalid: true\n    }\n  }\n  render() {\n    const { author, authorClass, network } = this.props;\n\n    return <div key={Math.random()} className={authorClass}>\n      {!this.state.isAuthorImagevalid ?\n        <AuthorAvatar authorClass={authorClass} username={author.name} network={network} color={network.id === null ? `#000` : network.color} errorPic={author.errorPic} />\n        :\n        <img key={Math.random()} className={`${authorClass}__`} src={author.picture && String(author.picture).includes('author.png') ? \" \" : author.picture.replace(/[ ]+/g, \"\")} alt={GET_MEDIA_NAME(author.picture)} width={44} height={44}\n          onError={(e) => {\n            const background = network.color == '#ffffff' ? '#000' : network.color\n            e.target.src = author.errorPic ? author.errorPic : `https://ui-avatars.com/api/?name=${author.name.replace(/\\s/g, '')}&background=${String(network.id === null ? `#000` : background).replace(\"#\", '')}&color=fff&length=1`\n            e.target.alt = author.name;\n            // this.setState({\n            //   isAuthorImagevalid: false\n            // })\n          }}\n        />\n      }\n    </div>\n  }\n}\n\n","import React, { PureComponent, Suspense } from \"react\";\nimport ReactHtmlParser from 'react-html-parser';\nimport { STRING_TO_URL_CONVERT } from '../../../../utils'\nimport { isSocialEmbed, isSocialWall, isTagEmbed } from \"../../../../actions/api\";\nimport ContentWithOutSlack from './PostContentConvertion'\n//const ContentWithOutSlack = React.lazy(() => import('./PostContentConvertion'));\nexport default class PostContent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.contentRef = React.createRef();\n  }\n  componentDidMount() {\n    if (isTagEmbed) {\n      setTimeout(() => {\n        const contentHeight = this.contentRef.current.clientHeight;\n        if (this.props.contentRefCallBack) this.props.contentRefCallBack(contentHeight)\n      }, 100);\n    }\n  }\n\n\n  render() {\n    const { contentClass, content, ThemeRule, font, personalization, item, contentTitle, readMore, maxLength, textAlign, maxLines, isReadMore } = this.props;\n    //const { expanded } = this.state\n    const truncateStyle = {\n      WebkitLineClamp: maxLines,\n      textAlign: ThemeRule.textAlignment\n    };\n    let contentData = item.network.id == 20 ? content : (isSocialWall && !isSocialEmbed) ? content : STRING_TO_URL_CONVERT(content);\n    if (item.network.id == 12) contentData = ReactHtmlParser(contentData); // for RRS but we have to change from backend.\n    const trimClasses = `${ThemeRule.lineTrim ? ` tb_content_line-${ThemeRule.lineTrim}` : ``}`\n    const contentClasses = `${contentClass} ${!isReadMore ? trimClasses : ''}`\n    return (\n      <div className={contentClasses} ref={this.contentRef} style={truncateStyle}>\n        {contentTitle ? <div className=\"tb_bold_txt__\">{ReactHtmlParser(contentTitle)}</div> : null}\n        <ContentWithOutSlack data={item} content={contentData} Personalization={personalization} ThemeRule={ThemeRule} />\n      </div>\n    );\n  }\n}\n"],"names":["mediaReplaceText","mediaUrl","networkId","String","replace","Spotlight","Component","constructor","props","super","handlePlay","this","setState","isPlaying","onMediaLoad","async","modalData","mediaHeight","mediaWidth","mediaSize","height","width","getImageWidthHeight","postFile","error","state","imageError","windowWidth","window","innerWidth","windowHeight","innerHeight","animate","itemData","componentDidMount","onLoadAnimation","componentDidUpdate","prevProps","_","setTimeout","render","wall","lineClamp","toFixed","mediaType","type","isVideo","mediaFile","concat","scale","Math","min","paddingBottom","includes","CloudHostUrl","_jsxs","id","className","children","_jsx","style","backgroundImage","maxWidth","src","alt","position","top","left","objectFit","cursor","zIndex","onLoad","ReactPlayer","url","config","facebook","appId","attributes","muted","poster","file","forceVideo","loop","autoPlay","volume","playsinline","playing","controls","memo","reactStringReplace","require","convertSlackEmoji","data","ThemeRule","Emojify","themeId","fontSize","ReactHtmlParser","ContentWithOutSlack","_ref","content","Personalization","customHasTagStyle","color","hashtag_color","fontWeight","backgroundColor","hashtag_background_status","hashtag_background_color","network","slackdown","_Fragment","hashtag_highlight","hashtag_feed","hashtag_all","parse","match","i","slackMember","hash","hashString","DefaultNetwork","React","Network","PureComponent","networkClass","isDefault","isDefaultIcon","icon","isTagEmbed","Suspense","fallback","Time","postTime","timeClass","timeAgo","AuthorAvatar","username","authorClass","errorPic","background","Author","isAuthorImagevalid","author","picture","GET_MEDIA_NAME","onError","e","target","name","random","PostContent","contentRef","contentHeight","current","clientHeight","contentRefCallBack","contentClass","font","personalization","item","contentTitle","readMore","maxLength","textAlign","maxLines","isReadMore","truncateStyle","WebkitLineClamp","textAlignment","contentData","isSocialWall","isSocialEmbed","STRING_TO_URL_CONVERT","trimClasses","lineTrim","contentClasses","ref"],"sourceRoot":""}