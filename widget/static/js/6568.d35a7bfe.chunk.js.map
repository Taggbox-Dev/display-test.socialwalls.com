{"version":3,"file":"static/js/6568.d35a7bfe.chunk.js","mappings":"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","sources":["app/Themes/Elements/ShareOnHover/ShareOnHover.js","app/Themes/Grid/Pixel/Elements/Card.js","app/Themes/Grid/Pixel/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { themePostTracking, gtmAnalyticsAction } from '../../../../actions/themeActions'\r\nimport { isTagEmbed } from '../../../../actions/api'\r\n\r\nexport default class ShareOnHover extends PureComponent {\r\n\r\n\r\n  onClickData = (shareURL) => event => {\r\n    const { item, wallID, ownerId } = this.props;\r\n    event.stopPropagation();\r\n    if (!isTagEmbed) themePostTracking({\r\n      type: 2,\r\n      action: 2,\r\n      wall: wallID,\r\n      feed: item.feedId,\r\n      post: item.referenceId ? item.referenceId : item.id,\r\n      owner: ownerId\r\n    })\r\n    gtmAnalyticsAction(\"Tagbox\", \"shareUrl\", \"shareUrl\", shareURL)\r\n    window.open(shareURL, \"_blank\")\r\n  }\r\n\r\n  render() {\r\n    const { share, shareClass } = this.props;\r\n    return <div className={`tb_share_wrapper ${shareClass}`}>\r\n      <div className={`tb_share_button_ tb__icon ${isTagEmbed ? 'tb-share-fill' : 'tb-share'}`}><div></div></div>\r\n      <div className=\"tb_share_icon_list_wrap\">\r\n        {share.facebook ?\r\n          <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(share.facebook)} className=\"tb_share_ico__ tb__icon tb-facebook\" title=\"facebook\"><div></div></div>\r\n          </div>\r\n          : ''}\r\n        {share.twitter ?\r\n          <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(share.twitter)} className=\"tb_share_ico__  tb__icon tb-twitter\" title=\"twitter\"><div></div></div>\r\n          </div>\r\n          : ''}\r\n        {share.linkedin ?\r\n          <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(share.linkedin)} className=\"tb_share_ico__ tb__icon tb-linkedin\" title=\"linkedin\"><div></div></div>\r\n          </div>\r\n          : ''}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n","import React, { Suspense, useRef, useEffect } from \"react\";\r\nimport { IS_THEME, PostTrimContent, themeImpressionTracking } from '../../../../../utils'\r\nimport { isSocialWall, isTagEmbed, isTagShop, isTagbox, isEmbed } from \"../../../../../actions/api\";\r\nimport { suiteTrack } from '../../../../../actions/api'\r\nimport ShareOnHover from \"../../../Elements/ShareOnHover/ShareOnHover\";\r\nconst AuthorDetails = React.lazy(() => import(\"./AuthorDetails\"));\r\nconst Media = React.lazy(() => import('./Media'));\r\nconst PostContent = React.lazy(() => import('../../../Elements/PostContent/PostContent'));\r\nconst trim_content_length = !isTagEmbed ? 200 : null;\r\n\r\n\r\nconst Card = ({ itemData, personalization, adjustWidth, ThemeRule, clickToShowPopUp, itemIndex, wallID, ownerId, postSizeInPx, wall, onClickPopUpSlider }) => {\r\n  const postTrack = useRef(null);\r\n  const mediaType = (itemData.type === 2 || itemData.type === 3 || itemData.type === 4 || itemData.type === 5) ? true : false;\r\n  const postTextContent = personalization.trimcontent ? PostTrimContent(itemData.content, trim_content_length) : itemData.content\r\n  const responsiveCardSize2x = postSizeInPx.adjustWidth < 250 ? true : false\r\n  const themeMode = (ThemeRule.postHover == 0 && isTagShop) ? 'light' : 'dark'\r\n  const overlay = isTagbox ? 'tb_g_p_color_overlay' : 'tb_g_p_post_overlay-' + themeMode\r\n  const overlayStyle = { backgroundColor: isTagbox ? ThemeRule.backgroundColor : '' }\r\n  useEffect(() => {\r\n    if (suiteTrack) themeImpressionTracking(postTrack);\r\n  }, []);\r\n  const isHotspot = itemData.hotspot && itemData.ugc_products.length > 0 ? true : false\r\n  const isShopBtn = isTagShop && (!itemData.hotspot && itemData.ugc_products.length > 0) ? true : false;\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (itemData.isPopUp) onClickPopUpSlider(itemIndex, itemData)\r\n  }, [itemIndex, itemData.isPopUp, itemData]);\r\n  return <div id={`tb-sp-post-${itemData.id}`} className={`tb_g_p_post_wrapper${responsiveCardSize2x ? ' tb_g_p_post_wrapper2x' : ''}`} style={{ width: `${adjustWidth}%`, padding: personalization.padding / 2 }} tb-network={itemData.network.id} tb-product={isShopBtn ? 1 : isHotspot ? 2 : 0} tabIndex=\"0\" role=\"article\" aria-label={`Post ${parseInt(itemIndex) + 1},${postTextContent}`} ref={postTrack} post-id={itemData.referenceId ? itemData.referenceId : itemData.id} feed-id={itemData.feedId}>\r\n    <div className={`tb_g_p_post_in`} onClick={clickToShowPopUp(itemIndex, itemData)}>\r\n      <div className=\"tb_g_p_post_media_wrapp\">\r\n        {itemData.share.status ? <ShareOnHover share={itemData.share} shareClass={'tb_g_p_share_container'} item={itemData} wallID={wallID} ownerId={ownerId} /> : ''}\r\n        {mediaType ? <Suspense fallback={<></>}><Media key={`img${itemIndex}_${itemData.id}`} itemData={itemData} wallID={wallID} ownerId={ownerId} ThemeID={personalization.widgetTheme} wall={wall} /></Suspense> : ''}\r\n        {isEmbed ? <>\r\n          <div className=\"tb_g_p_post_details\">\r\n            <div className=\"tb_g_p_contant_wrapper\">\r\n              {((!ThemeRule.hideContent || itemData.type == 1)) ? <Suspense fallback={<></>}><PostContent contentClass={'tb_g_p_content'} item={itemData} content={postTextContent} font={ThemeRule} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} /></Suspense> : ''}\r\n            </div>\r\n            <Suspense fallback={<></>}><AuthorDetails ownerId={ownerId} postTime={itemData.createdAt} author={itemData.author} network={itemData.network} font={ThemeRule} personalization={personalization} ThemeRule={ThemeRule} /></Suspense>\r\n          </div>\r\n          <div className={`tb_g_p_post_overlay ${overlay}`} style={overlayStyle}><div></div></div>\r\n        </> : null}\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\nexport default Card","import React, { Component, memo } from \"react\";\r\nimport Card from \"./Elements/Card\";\r\nimport { connect } from 'react-redux';\r\nimport { isSocialEmbed } from \"../../../../actions/api\";\r\nimport { managePostHeight } from '../../../../actions/themeActions';\r\nimport \"./scss/GridPixel.scss\";\r\nclass GPixel extends Component {\r\n  state = {\r\n    modifiedData: [],\r\n    currentIndex: 0,\r\n    replaceId: 0\r\n  }\r\n  componentDidMount() {\r\n    this.onLoadData()\r\n  }\r\n  onLoadData = () => {\r\n    const { postData, wall, heightUpdate } = this.props;\r\n    if (isSocialEmbed) this.setState({ modifiedData: postData, currentIndex: 0 });\r\n    else {\r\n      var modifiedData = []\r\n      postData.map((item, index) => {\r\n        if (index < wall.ThemeRule.numberOfCoumn) modifiedData.push(item)\r\n      });\r\n      this.setState({ modifiedData, currentIndex: parseInt(wall.ThemeRule.numberOfCoumn) - 1 }, () => this.onFlipPost());\r\n    }\r\n\r\n    setTimeout(() => heightUpdate(), 1000)\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.postData !== nextProps.postData) {\r\n      this.onLoadData()\r\n    }\r\n  }\r\n\r\n  onFlipPost = () => {\r\n    const { wall } = this.props;\r\n    setTimeout(() => {\r\n      const { postData, wall } = this.props;\r\n      const { currentIndex, replaceId, modifiedData } = this.state;\r\n      let newCurrentIndex = currentIndex + 1;\r\n      if (newCurrentIndex >= postData.length) {\r\n        newCurrentIndex = 0;\r\n      }\r\n      modifiedData[replaceId] = postData[newCurrentIndex];\r\n      let newReplaceId = replaceId + 1\r\n      if (newReplaceId > parseInt(wall.ThemeRule.numberOfCoumn)) newReplaceId = 0\r\n      this.setState({ modifiedData, currentIndex: newCurrentIndex, replaceId: newReplaceId }, () => this.onFlipPost());\r\n    }, (wall.ThemeRule.slideDelay * 1000))\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.postData !== this.props.postData) return true\r\n    else if (prevState.currentIndex !== this.state.currentIndex) return true\r\n    else if (prevState.replaceId !== this.state.replaceId) return true\r\n    else return false\r\n  }\r\n\r\n  render() {\r\n    const { postData, completeDataObject, adjustWidth, wall, clickToShowPopUp, cardNumber, onClickToCTA, postSizeInPx, onClickPopUpSlider } = this.props;\r\n    const { modifiedData } = this.state;\r\n    let rowCount = !wall.ThemeRule.multiRow || wall.ThemeRule.multiRow === 0 ? 1 : wall.ThemeRule.multiRow;\r\n    return (\r\n      <div tabIndex=\"0\" aria-label={`There are ${(postData && postData.length > 0) ? postData.length : 0} posts in the feed`} role=\"feed\" className=\"tb_g_p_post_container\">\r\n        {(modifiedData && modifiedData.length > 0) && modifiedData.map((item, index) => {\r\n          const cardData = completeDataObject[item];\r\n          return <Card ownerId={wall.Wall.owner} itemData={cardData} key={`sqr_crd_${index}_${item.id}`} itemIndex={index} adjustWidth={adjustWidth} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} wall={wall} onClickPopUpSlider={onClickPopUpSlider} />\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    postHeight: state.postHeight.data\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    managePostHeight: (data) => dispatch(managePostHeight(data))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(GPixel))"],"names":["ShareOnHover","PureComponent","constructor","arguments","onClickData","shareURL","event","item","wallID","ownerId","this","props","stopPropagation","isTagEmbed","themePostTracking","type","action","wall","feed","feedId","post","referenceId","id","owner","gtmAnalyticsAction","window","open","render","share","shareClass","_jsxs","className","concat","children","_jsx","facebook","onClick","title","twitter","linkedin","AuthorDetails","React","Media","PostContent","trim_content_length","_ref","itemData","personalization","adjustWidth","ThemeRule","clickToShowPopUp","itemIndex","postSizeInPx","onClickPopUpSlider","postTrack","useRef","mediaType","postTextContent","trimcontent","PostTrimContent","content","responsiveCardSize2x","themeMode","postHover","isTagShop","overlay","isTagbox","overlayStyle","backgroundColor","useEffect","suiteTrack","themeImpressionTracking","isHotspot","hotspot","ugc_products","length","isShopBtn","isPopUp","style","width","padding","network","tabIndex","role","parseInt","ref","status","Suspense","fallback","_Fragment","ThemeID","widgetTheme","isEmbed","hideContent","contentClass","font","contentTitle","postTime","createdAt","author","GPixel","Component","state","modifiedData","currentIndex","replaceId","onLoadData","postData","heightUpdate","isSocialEmbed","setState","map","index","numberOfCoumn","push","onFlipPost","setTimeout","newCurrentIndex","newReplaceId","slideDelay","componentDidMount","componentWillReceiveProps","nextProps","componentDidUpdate","prevProps","prevState","completeDataObject","cardNumber","onClickToCTA","multiRow","cardData","Card","Wall","Personalization","connect","postHeight","data","dispatch","managePostHeight","memo"],"sourceRoot":""}