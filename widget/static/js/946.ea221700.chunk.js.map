{"version":3,"file":"static/js/946.ea221700.chunk.js","mappings":"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","sources":["app/Themes/Elements/ShareOnHover/ShareOnHover.js","app/Themes/Grid/Focus/Elements/Card.js","app/Themes/Grid/Focus/CollageRows.js","app/Themes/Grid/Focus/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { themePostTracking, gtmAnalyticsAction } from '../../../../actions/themeActions'\r\nimport { isTagEmbed } from '../../../../actions/api'\r\n\r\nexport default class ShareOnHover extends PureComponent {\r\n\r\n\r\n  onClickData = (shareURL) => event => {\r\n    const { item, wallID, ownerId } = this.props;\r\n    event.stopPropagation();\r\n    if (!isTagEmbed) themePostTracking({\r\n      type: 2,\r\n      action: 2,\r\n      wall: wallID,\r\n      feed: item.feedId,\r\n      post: item.referenceId ? item.referenceId : item.id,\r\n      owner: ownerId\r\n    })\r\n    gtmAnalyticsAction(\"Tagbox\", \"shareUrl\", \"shareUrl\", shareURL)\r\n    window.open(shareURL, \"_blank\")\r\n  }\r\n\r\n  render() {\r\n    const { share, shareClass } = this.props;\r\n    return <div className={`tb_share_wrapper ${shareClass}`}>\r\n      <div className={`tb_share_button_ tb__icon ${isTagEmbed ? 'tb-share-fill' : 'tb-share'}`}><div></div></div>\r\n      <div className=\"tb_share_icon_list_wrap\">\r\n        {share.facebook ?\r\n          <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(share.facebook)} className=\"tb_share_ico__ tb__icon tb-facebook\" title=\"facebook\"><div></div></div>\r\n          </div>\r\n          : ''}\r\n        {share.twitter ?\r\n          <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(share.twitter)} className=\"tb_share_ico__  tb__icon tb-twitter\" title=\"twitter\"><div></div></div>\r\n          </div>\r\n          : ''}\r\n        {share.linkedin ?\r\n          <div className=\"tb_share_icon_list\">\r\n            <div onClick={this.onClickData(share.linkedin)} className=\"tb_share_ico__ tb__icon tb-linkedin\" title=\"linkedin\"><div></div></div>\r\n          </div>\r\n          : ''}\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n","import React, { Suspense, useRef, useEffect } from \"react\";\r\nimport { IS_THEME, PostTrimContent, themeImpressionTracking } from '../../../../../utils'\r\nimport { isTagEmbed, isTagShop } from \"../../../../../actions/api\";\r\nimport ShareOnHover from \"../../../Elements/ShareOnHover/ShareOnHover\";\r\nconst AuthorDetails = React.lazy(() => import(\"./AuthorDetails\"));\r\nconst Media = React.lazy(() => import('./Media'));\r\nconst PostContent = React.lazy(() => import('../../../Elements/PostContent/PostContent'));\r\n\r\nconst Card = ({ itemData, personalization, adjustWidth, ThemeRule, clickToShowPopUp, itemIndex, wallID, ownerId, postSizeInPx, wall, onClickPopUpSlider, contentActive }) => {\r\n  const postTrack = useRef(null);\r\n  const mediaType = itemData.type !== 1 ? true : false;\r\n  const trim_content_length = 100\r\n  const postTextContent = personalization.trimcontent ? PostTrimContent(itemData.content, trim_content_length) : itemData.content\r\n  const responsiveCardSize2x = postSizeInPx.adjustWidth < 250 ? true : false\r\n  const showAuthor = ThemeRule.postAuthor || ThemeRule.postTime ? true : false\r\n  const isHotspot = itemData.hotspot && itemData.ugc_products.length > 0 ? true : false\r\n  const isShopBtn = isTagShop && (!itemData.hotspot && itemData.ugc_products.length > 0) ? true : false;\r\n  const themeMode = (ThemeRule.postHover == 0 && isTagShop) ? 'light' : 'dark'\r\n  useEffect(() => {\r\n    if (itemData.isPopUp) onClickPopUpSlider(itemIndex, itemData)\r\n  }, [itemIndex, itemData.isPopUp, itemData]);\r\n  return <div id={`tb-sp-post-${itemData.id}`} className={`tb_gf_post_wrapper${responsiveCardSize2x ? ' tb_gf_post_wrapper2x' : ''}`} style={{ width: `${adjustWidth}%`, padding: personalization.padding / 2, float: 'left' }} tb-network={itemData.network.id} tb-product={isShopBtn ? 1 : isHotspot ? 2 : 0} tabIndex=\"0\" role=\"article\" aria-label={`Post ${parseInt(itemIndex) + 1},${postTextContent}`} ref={postTrack} post-id={itemData.referenceId ? itemData.referenceId : itemData.id} feed-id={itemData.feedId}>\r\n    <div className={`tb_gf_post_in ${contentActive ? `tb_active` : ``} `} onClick={clickToShowPopUp(itemIndex, itemData)}>\r\n      <div className=\"tb_gf_post_media_wrapp\">\r\n        {itemData.share.status && !isTagShop ? <ShareOnHover share={itemData.share} shareClass={'tb_gf_share_container'} item={itemData} wallID={wallID} ownerId={ownerId} /> : ''}\r\n        {mediaType ? <Suspense fallback={<></>}><Media key={`img${itemIndex}_${itemData.id}`} itemData={{ ...itemData, postFileNew: itemData.filename }} wallID={wallID} ownerId={ownerId} ThemeID={personalization.widgetTheme} wall={wall} /></Suspense> : ''}\r\n      </div>\r\n      <div className=\"tb_gf_post_details\">\r\n        <div className=\"tb_gf_contant_wrapper\">\r\n          {((!ThemeRule.hideContent || itemData.type == 1)) ? <Suspense fallback={<></>}><PostContent contentClass={'tb_gf_content'} item={itemData} content={postTextContent} font={ThemeRule} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} /></Suspense> : ''}\r\n        </div>\r\n        <Suspense fallback={<></>}><AuthorDetails ownerId={ownerId} postTime={itemData.createdAt} author={itemData.author} network={itemData.network} font={ThemeRule} personalization={personalization} ThemeRule={ThemeRule} /></Suspense>\r\n      </div>\r\n      {!ThemeRule.hideContent || showAuthor ? \r\n      <div className={`tb_gf_post_overlay tb_gf_post_overlay-${themeMode}`}><div></div></div>\r\n      :null}\r\n    </div>\r\n  </div>\r\n}\r\nexport default Card","import { Component } from \"react\";\r\nimport Card from \"./Elements/Card\";\r\nimport { isSocialEmbed } from \"../../../../actions/api\";\r\nclass CollageFocusRows extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentActiveIndex: -1\r\n        }\r\n    }\r\n    intervalId = null\r\n    componentDidMount() {\r\n        const { currentIndex, intervalTime, itemIndex } = this.props\r\n        if (currentIndex == itemIndex && !isSocialEmbed) {\r\n            this.intervalId = setInterval(this.updateIndex, intervalTime * 1000);\r\n        }\r\n    }\r\n\r\n    updateIndex = () => {\r\n        const { itemData, handleSlideChange } = this.props\r\n        let nextIndex = this.state.currentActiveIndex + 1;\r\n        if (nextIndex >= itemData.length) {\r\n            nextIndex = 0;\r\n            handleSlideChange()\r\n        }\r\n        this.setState({ currentActiveIndex: nextIndex })\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { itemIndex } = this.props\r\n        if (nextProps.currentIndex != itemIndex) {\r\n            clearInterval(this.intervalId)\r\n            this.setState({ currentActiveIndex: -1 })\r\n        }\r\n        if (nextProps.currentIndex == itemIndex && !isSocialEmbed) {\r\n            this.intervalId = setInterval(this.updateIndex, nextProps.intervalTime * 1000);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { wall, largeDiv, smallDiv, itemData, completeDataObject, itemIndex, clickToShowPopUp, onClickToCTA, postSizeInPx, adjustWidth, onClickPopUpSlider } = this.props;\r\n        const { currentActiveIndex } = this.state;\r\n        const postPosition = wall.ThemeRule.highlightPosition || 'left'; const sumPost = isSocialEmbed ? itemIndex % 2 : 0;\r\n        const largeDivStyle = { width: largeDiv + `%`, float: sumPost == '0' ? (postPosition == 'right' ? 'right' : 'left') : postPosition == 'right' ? 'left' : 'right' };\r\n        const smallDivStyle = { width: smallDiv + `%`, float: sumPost == '1' ? (postPosition == 'right' ? 'left' : 'right') : postPosition == 'right' ? 'left' : 'right' }\r\n        return (itemData && itemData.length > 0) ? <div className=\"ts_gf_post_row\">\r\n            <div className=\"ts_gf_post_large\" style={largeDivStyle}><Card ownerId={wall.Wall.owner} itemData={completeDataObject[itemData[0]]} key={`sqr_crd_${0}_${completeDataObject[itemData[0]].id}`} itemIndex={itemIndex} adjustWidth={100} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} wall={wall} completeDataObject={completeDataObject} onClickPopUpSlider={onClickPopUpSlider} contentActive={currentActiveIndex == 0} /></div>\r\n            <div className=\"ts_gf_post_small\" style={smallDivStyle}>\r\n                {\r\n                    (itemData && itemData.length > 0) ? itemData.map((item, index) => {\r\n                        const cardData = completeDataObject[item];\r\n                        return (index != 0 ? <Card ownerId={wall.Wall.owner} itemData={cardData} key={`sqr_crd_${index}_${item.id}`} itemIndex={index} adjustWidth={adjustWidth} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} wall={wall} completeDataObject={completeDataObject} onClickPopUpSlider={onClickPopUpSlider} contentActive={currentActiveIndex == index} /> : null)\r\n                    }) : null\r\n                } </div>\r\n\r\n        </div> : null\r\n    }\r\n}\r\nexport default CollageFocusRows","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { Splide, SplideSlide, SplideTrack } from '@splidejs/react-splide';\r\nimport { managePostHeight } from '../../../../actions/themeActions';\r\nimport '../../scss/ThemesSplide.scss'\r\nimport \"./scss/GridFocus.scss\";\r\nimport CollageRows from \"./CollageRows\";\r\nimport { isSocialEmbed } from \"../../../../actions/api\";\r\nexport const getPostWidth = (windowWidth, ColumnCount) => {\r\n  const getWidths = (inWidth, cardWidth) => ({ cardWidth, largeDiv: inWidth * 2, smallDiv: 100 - inWidth * 2 });\r\n  switch (ColumnCount) {\r\n    case 3: return getWidths(windowWidth > 320 ? 100 / 3 : 100 / 3, 100 / 1);\r\n    case 5: return getWidths(windowWidth > 767 ? 100 / 4 : 100 / 3, windowWidth > 767 ? 100 / 2 : 100 / 1);\r\n    case 7: return getWidths(windowWidth > 767 ? 100 / 5 : 100 / 3, windowWidth > 767 ? 100 / 3 : 100 / 1);\r\n    case 9: return getWidths(windowWidth > 767 ? 100 / 6 : 100 / 3, windowWidth > 767 ? 100 / 4 : 100 / 1);\r\n    case 10: return getWidths(windowWidth > 767 ? 100 / 4 : 100 / 3, windowWidth > 767 ? 100 / 2 : 100 / 1);\r\n    case 13: return getWidths(windowWidth > 767 ? 100 / 4 : 100 / 3, windowWidth > 767 ? 100 / 2 : 100 / 1);\r\n    case 17: return getWidths(windowWidth > 767 ? 100 / 6 : 100 / 3, windowWidth > 767 ? 100 / 4 : 100 / 1);\r\n    default: return getWidths(windowWidth < 767 ? 100 / 3 : 100 / 1, 100 / 1);\r\n  }\r\n}\r\nclass CollageTheme extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.myRef = React.createRef();\r\n  }\r\n  state = {\r\n    postData: [],\r\n    windowWidth: window.innerWidth,\r\n    currentIndex: -1\r\n  }\r\n  componentDidMount() {\r\n    const { renderId, heightUpdate } = this.props;\r\n    if (renderId.renderId) {\r\n      this.setState({\r\n        windowWidth: document.getElementById(renderId.renderId).clientWidth\r\n      })\r\n    }\r\n    setTimeout(() => heightUpdate(), 1000)\r\n  }\r\n\r\n  handleSlideChange = () => {\r\n    const { currentIndex } = this.state\r\n    const nextSlideIndex = currentIndex + 1;\r\n    if (this.myRef && this.myRef.current) {\r\n      if (nextSlideIndex < this.myRef.current.slides.length) this.myRef.current.splide.go(nextSlideIndex)\r\n      else this.myRef.current.splide.go(0)\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.postData !== this.props.postData) return true\r\n    else if (prevState.currentIndex !== this.state.currentIndex) return true\r\n    else return false\r\n  }\r\n\r\n  render() {\r\n    const { postData, completeDataObject, wall, clickToShowPopUp, cardNumber, onClickToCTA, postSizeInPx, onClickPopUpSlider } = this.props;\r\n    const { windowWidth } = this.state\r\n    let totalPostBestFit = postData.length;\r\n    if (wall && wall.Personalization.fitRow == 1) {\r\n      if (postData.length >= parseInt(cardNumber)) {\r\n        let bestFitEachRow = postData.length / parseInt(cardNumber);\r\n        totalPostBestFit = (parseInt(cardNumber) * parseInt(bestFitEachRow));\r\n      }\r\n    }\r\n    var clm = ''\r\n    const ColumnCount = wall.ThemeRule.numberOfCoumn\r\n    const { cardWidth, largeDiv, smallDiv } = getPostWidth(windowWidth, ColumnCount)\r\n    if (windowWidth < 768) clm = 3\r\n    else clm = ColumnCount ? ColumnCount : 1\r\n    var i = 0, n = postData.length, newPostdata = [];\r\n    while (i < n) { newPostdata.push(postData.slice(i, i += clm)); }\r\n    var postClmnNo = windowWidth < 768 ? '3' : ColumnCount\r\n    const delaySetting = wall?.Personalization?.slideDelay || 5;\r\n    const settings = {\r\n      type: 'fade',\r\n      rewind: false,\r\n      speed: 1000,\r\n      perPage: 1,\r\n      perMove: 1,\r\n      gap: 0,\r\n      autoplay: false,\r\n      pauseOnHover: false,\r\n      padding: 0,\r\n      pagination: false,\r\n      arrows: false,\r\n    };\r\n    const { currentIndex } = this.state;\r\n\r\n    return <div tabIndex=\"0\" aria-label={`There are ${(postData && postData.length > 0) ? postData.length : 0} posts in the feed`} role=\"feed\" className=\"tb_gf_post_container\">\r\n      {\r\n        isSocialEmbed ? <div className=\"tb_gf_slider_wrappper\">{(newPostdata && newPostdata.length > 0) && newPostdata.map((item, index) => {\r\n          return item.length == postClmnNo ? <CollageRows key={index} ownerId={wall.Wall.owner} itemData={item} itemIndex={index} adjustWidth={cardWidth} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} wall={wall} completeDataObject={completeDataObject} largeDiv={largeDiv} smallDiv={smallDiv} onClickPopUpSlider={onClickPopUpSlider} intervalTime={parseFloat((delaySetting))} currentIndex={currentIndex} handleSlideChange={this.handleSlideChange} /> : null\r\n        })}</div> : <Splide hasTrack={false} className=\"tb_gf_slider_wrappper\" options={settings} ref={this.myRef} onActive={(splide, prev, next) => this.setState({ currentIndex: prev.index })}>\r\n          <SplideTrack>\r\n            {(newPostdata && newPostdata.length > 0) && newPostdata.map((item, index) => {\r\n              return item.length == postClmnNo ? <SplideSlide key={index}><CollageRows ownerId={wall.Wall.owner} itemData={item} itemIndex={index} adjustWidth={cardWidth} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} wall={wall} completeDataObject={completeDataObject} largeDiv={largeDiv} smallDiv={smallDiv} onClickPopUpSlider={onClickPopUpSlider} intervalTime={parseFloat((delaySetting))} currentIndex={currentIndex} handleSlideChange={this.handleSlideChange} /></SplideSlide> : null\r\n            })}\r\n          </SplideTrack>\r\n        </Splide>\r\n      }\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    postHeight: state.postHeight.data\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    managePostHeight: (data) => dispatch(managePostHeight(data))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CollageTheme)"],"names":["ShareOnHover","PureComponent","constructor","arguments","onClickData","shareURL","event","item","wallID","ownerId","this","props","stopPropagation","isTagEmbed","themePostTracking","type","action","wall","feed","feedId","post","referenceId","id","owner","gtmAnalyticsAction","window","open","render","share","shareClass","_jsxs","className","concat","children","_jsx","facebook","onClick","title","twitter","linkedin","AuthorDetails","React","Media","PostContent","_ref","itemData","personalization","adjustWidth","ThemeRule","clickToShowPopUp","itemIndex","postSizeInPx","onClickPopUpSlider","contentActive","postTrack","useRef","mediaType","postTextContent","trimcontent","PostTrimContent","content","responsiveCardSize2x","showAuthor","postAuthor","postTime","isHotspot","hotspot","ugc_products","length","isShopBtn","isTagShop","themeMode","postHover","useEffect","isPopUp","style","width","padding","float","network","tabIndex","role","parseInt","ref","status","Suspense","fallback","_Fragment","postFileNew","filename","ThemeID","widgetTheme","hideContent","contentClass","font","contentTitle","createdAt","author","CollageFocusRows","Component","super","intervalId","updateIndex","handleSlideChange","nextIndex","state","currentActiveIndex","setState","componentDidMount","currentIndex","intervalTime","isSocialEmbed","setInterval","componentWillUnmount","clearInterval","componentWillReceiveProps","nextProps","largeDiv","smallDiv","completeDataObject","onClickToCTA","postPosition","highlightPosition","sumPost","largeDivStyle","smallDivStyle","Card","Wall","Personalization","map","index","cardData","getPostWidth","windowWidth","ColumnCount","getWidths","inWidth","cardWidth","CollageTheme","postData","innerWidth","nextSlideIndex","myRef","current","slides","splide","go","renderId","heightUpdate","document","getElementById","clientWidth","setTimeout","componentDidUpdate","prevProps","prevState","_wall$Personalization","cardNumber","totalPostBestFit","fitRow","bestFitEachRow","clm","numberOfCoumn","i","n","newPostdata","push","slice","postClmnNo","delaySetting","slideDelay","CollageRows","parseFloat","Splide","hasTrack","options","rewind","speed","perPage","perMove","gap","autoplay","pauseOnHover","pagination","arrows","onActive","prev","next","SplideTrack","SplideSlide","connect","postHeight","data","dispatch","managePostHeight"],"sourceRoot":""}