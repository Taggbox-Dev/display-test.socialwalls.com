{"version":3,"file":"static/js/4166.9d7b1a8c.chunk.js","mappings":"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","sources":["app/Themes/Elements/PostContent/PostContentConvertion.js","app/Themes/Badge/Elements/PopUpCard.js","app/Themes/Elements/Network/Network.js","app/Themes/Elements/Author/Elements/AuthorAvatar.js","app/Themes/Elements/Author/Author.js","app/Themes/Elements/PostContent/PostContent.js","app/Themes/Elements/Rating/Rating.js"],"sourcesContent":["import React, { memo } from \"react\";\nimport Emojify from 'react-emojione';\nimport ReactHtmlParser from 'react-html-parser';\nconst reactStringReplace = require(\"react-string-replace\");\n//import { PostTrimContent } from \"../../../../actions/themeActions\";\nconst convertSlackEmoji = (data, ThemeRule) => {\n    return <Emojify style={ThemeRule && [66, 70].includes(ThemeRule?.themeId) ? { width: (ThemeRule.fontSize), height: (ThemeRule.fontSize) } : null}>{ReactHtmlParser(data)}</Emojify>\n}\nconst ContentWithOutSlack = ({ data, content, Personalization, ThemeRule }) => {\n    const customHasTagStyle = {\n        color: Personalization.hashtag_color,\n        fontWeight: \"bold\",\n        backgroundColor: Personalization.hashtag_background_status == 1 ? Personalization.hashtag_background_color : 'transparent'\n    }\n\n    return data.network.id == 20 && window.slackdown ? <>\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                    content,\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </div>\n                    )\n                ), data.slackMember), ThemeRule)\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                        content,\n                        data.hash.hashString,\n                        (match, i) => (\n                            <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </div>\n                        )\n                    ), data.slackMember), ThemeRule)\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                            content,\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </div>\n                            )\n                        ), data.slackMember), ThemeRule)\n                        : convertSlackEmoji(window.slackdown.parse(content, data.slackMember), ThemeRule)}\n    </> : <>\n\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? reactStringReplace(\n                    ReactHtmlParser(content),\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <div className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </div>\n                    )\n                )\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? reactStringReplace(\n                        ReactHtmlParser(content),\n                        data.hash.hashString,\n                        (match, i) => (\n                            <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </strong>\n                        )\n                    )\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? reactStringReplace(\n                            ReactHtmlParser(content),\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <div key={`${data.id}_${i}`} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </div>\n                            )\n                        )\n                        : convertSlackEmoji(content, ThemeRule)}\n    </>\n}\n\nexport default memo(ContentWithOutSlack);","import React, { PureComponent } from \"react\";\nimport Author from \"../../Elements/Author/Author\";\nimport PostContent from '../../Elements/PostContent/PostContent'\nimport Rating from \"../../Elements/Rating/Rating\";\nimport Network from \"../../Elements/Network/Network\";\nimport { PostTrimContent } from \"../../../../utils\";\nimport { isTagEmbed } from \"../../../../actions/api\";\n\nconst trim_content_length = !isTagEmbed ? 200 : null;\nconst PopUpCard = ({ itemData, personalization, ThemeRule, toggleDivs }) => {\n\n    const contentClass = (itemData.rating > 0) ? 'tb_bt_rating_content' : 'tb_bt_content'\n    const textDecorate = (itemData.type === 1 && personalization.textDecorate) ? 'tb_bt_text_decoration tb_bt_text_post' : '';\n    const postTextContent = personalization.trimcontent ? PostTrimContent(itemData.content, trim_content_length) : itemData.content\n\n    const username = itemData.author.username ? itemData.author.username.length > 0 ? `@${itemData.author.username}` : `` : '';\n    const authorNameStyle = { color: ThemeRule.authorColor };\n\n    const isProduct = itemData.ugc_products && itemData.ugc_products.length > 0 ? true : false\n    const isShopIcon = (isProduct && itemData.hotspot === 0) ? true : false\n    const isHotspot = itemData.hotspot && isProduct ? true : false\n\n\n    return <div id={`tb-bt-post-${itemData.id}`} className=\"tb_bt_post_in\" tb-network={itemData.network.id} tb-product={isShopIcon ? 1 : isHotspot ? 2 : 0}>\n        <div className=\"tb_bt_close_btn\" onClick={toggleDivs}>\n            <div className=\"tb_bt_close_ico tb__icon tb-close-circle-line\"></div>\n        </div>\n        <Author author={itemData.author} network={itemData.network} authorClass={'tb_bt_author_profile'} />\n        <div className=\"tb_bt_post_info\">\n            <div className=\"tb_bt_author_info\">\n                <div className=\"tb_bt_authorname\" style={authorNameStyle}>{itemData.author.name}</div>\n                <div className=\"tb_bt_username\" style={authorNameStyle}>{username}</div>\n            </div>\n            <div className=\"tb_bt_contant_wrapper\">\n                <PostContent contentClass={`${contentClass} ${textDecorate}`} item={itemData} content={postTextContent} font={ThemeRule} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} textAlign={'left'} />\n            </div>\n            <div className=\"tb_bt_post_media_wrapp\">\n                <div className=\"tb_bt_rating__\"><Rating rating={itemData.rating} network={itemData.network} /> </div>\n            </div>\n            <div className=\"tb_bt_social_\">\n                <Network networkClass={'tb_bt_social_ico'} network={itemData.network} isDefault={ThemeRule.iconType === 1 ? true : false} ThemeRule={ThemeRule} />\n                <div className=\"tb_bt_network_name\">{itemData.network.name}</div>\n            </div>\n        </div>\n    </div>\n}\nexport default PopUpCard","import React, { PureComponent, Suspense } from \"react\";\nimport { isTagEmbed } from \"../../../../actions/api\";\nconst DefaultNetwork = React.lazy(() => import(\"./DefaultNetwork\"));\n\nexport default class Network extends PureComponent {\n  render() {\n    const { network, networkClass, ThemeRule, isDefault, Personalization } = this.props;\n    const isDefaultIcon = isDefault ? (network.id === 7 || network.id === 4 || network.id === 36) ? false : true : false\n    const icon = isTagEmbed && network.id == 36 ? \"tagembed\" : network.icon;\n    return (isDefaultIcon ? <div className={`${networkClass} tb__icon tb-${icon.replace(/fa-/g, \"\")}`}><div></div></div> : <Suspense fallback={<></>}> <DefaultNetwork network={network} networkClass={networkClass} /></Suspense>);\n  }\n}\n","import React, { memo } from 'react';\nconst AuthorAvatar = ({ username, network, authorClass, errorPic }) => {\n    const background = network.color == '#ffffff' ? '#000' : network.color\n    return <img className={`${authorClass}__`} src={errorPic ? errorPic : `https://ui-avatars.com/api/?name=${username.replace(/\\s/g, '')}&background=${String(network.id === null ? `#000` : background).replace(\"#\", '')}&color=fff&length=1`} alt={username} width={45} height={45} />\n}\n\nexport default memo(AuthorAvatar);","import React, { PureComponent } from \"react\";\nimport { GET_MEDIA_NAME } from \"../../../../utils\";\nimport AuthorAvatar from \"./Elements/AuthorAvatar\";\n\n\nexport default class Author extends PureComponent {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAuthorImagevalid: true\n    }\n  }\n  render() {\n    const { author, authorClass, network } = this.props;\n\n    return <div key={Math.random()} className={authorClass}>\n      {!this.state.isAuthorImagevalid ?\n        <AuthorAvatar authorClass={authorClass} username={author.name} network={network} color={network.id === null ? `#000` : network.color} errorPic={author.errorPic} />\n        :\n        <img key={Math.random()} className={`${authorClass}__`} src={author.picture && String(author.picture).includes('author.png') ? \" \" : author.picture.replace(/[ ]+/g, \"\")} alt={GET_MEDIA_NAME(author.picture)} width={44} height={44}\n          onError={(e) => {\n            const background = network.color == '#ffffff' ? '#000' : network.color\n            e.target.src = author.errorPic ? author.errorPic : `https://ui-avatars.com/api/?name=${author.name.replace(/\\s/g, '')}&background=${String(network.id === null ? `#000` : background).replace(\"#\", '')}&color=fff&length=1`\n            e.target.alt = author.name;\n            // this.setState({\n            //   isAuthorImagevalid: false\n            // })\n          }}\n        />\n      }\n    </div>\n  }\n}\n\n","import React, { PureComponent, Suspense } from \"react\";\nimport ReactHtmlParser from 'react-html-parser';\nimport { STRING_TO_URL_CONVERT } from '../../../../utils'\nimport { isSocialEmbed, isSocialWall, isTagEmbed } from \"../../../../actions/api\";\nimport ContentWithOutSlack from './PostContentConvertion'\n//const ContentWithOutSlack = React.lazy(() => import('./PostContentConvertion'));\nexport default class PostContent extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.contentRef = React.createRef();\n  }\n  componentDidMount() {\n    if (isTagEmbed) {\n      setTimeout(() => {\n        const contentHeight = this.contentRef.current.clientHeight;\n        if (this.props.contentRefCallBack) this.props.contentRefCallBack(contentHeight)\n      }, 100);\n    }\n  }\n\n\n  render() {\n    const { contentClass, content, ThemeRule, font, personalization, item, contentTitle, readMore, maxLength, textAlign, maxLines, isReadMore } = this.props;\n    //const { expanded } = this.state\n    const truncateStyle = {\n      WebkitLineClamp: maxLines,\n      textAlign: ThemeRule.textAlignment\n    };\n    let contentData = item.network.id == 20 ? content : (isSocialWall && !isSocialEmbed) ? content : STRING_TO_URL_CONVERT(content);\n    if (item.network.id == 12) contentData = ReactHtmlParser(contentData); // for RRS but we have to change from backend.\n    const trimClasses = `${ThemeRule.lineTrim ? ` tb_content_line-${ThemeRule.lineTrim}` : ``}`\n    const contentClasses = `${contentClass} ${!isReadMore ? trimClasses : ''}`\n    return (\n      <div className={contentClasses} ref={this.contentRef} style={truncateStyle}>\n        {contentTitle ? <div className=\"tb_bold_txt__\">{ReactHtmlParser(contentTitle)}</div> : null}\n        <ContentWithOutSlack data={item} content={contentData} Personalization={personalization} ThemeRule={ThemeRule} />\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { isTagEmbed } from \"../../../../actions/api\";\n\nconst NetworkStar = ({ network }) => {\n    const networkStyles = {\n        3: { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#1b74e4' },\n        19: { className: 'tb_rating_ico__ tb__icon tb-yelp-star', color: '#e00707' },\n        23: { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#ff385c' },\n        28: isTagEmbed ? { className: 'tb_rating_ico__ tb__icon tb-star', color: '#F8B90C' } : { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#F8B90C' },\n        29: isTagEmbed ? { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#000' } : { className: 'tb_rating_ico__ tb__icon tb-default-star', color: '#613983' },\n        33: { className: 'tb_rating_ico__ tb__icon tb-trustpilot', color: '#000' },\n        35: { className: 'tb_rating_ico__ tb__icon tb-star-fill', color: '#34E0A1' },\n    };\n\n    const { className, color } = networkStyles[network.id] || {\n        className: 'tb_rating_ico__ tb__icon tb-default-star',\n        color: '#F8B90C',\n    };\n\n    return <div className={className} style={{ color }} tb-network={network.id}><div></div></div>;\n};\n\nconst ThemeStar = ({ ThemeID }) => {\n    const themeStyles = {\n        59: { className: 'tb_rating_ico__ tb__icon tb-star-fill', color: '#34E0A1' },\n    };\n\n    const { className, color } = themeStyles[ThemeID] || {\n        className: 'tb_rating_ico__ tb__icon tb-star-alt',\n        color: '#F8B90C',\n    };\n\n    return <div className={className} style={{ color }} tb-network={ThemeID}></div>;\n};\nexport default class Rating extends PureComponent {\n    render() {\n        const { rating, network, ThemeID } = this.props;\n        return (\n            <div className=\"tb__rating__\" aria-hidden>\n                {\n                    rating ? [...Array(rating)].map((el, index) => ThemeID ? <ThemeStar key={index} ThemeID={ThemeID} /> : <NetworkStar key={index} network={network} /> ) : null\n                }\n            </div>\n        );\n    }\n}\n"],"names":["reactStringReplace","require","convertSlackEmoji","data","ThemeRule","_jsx","Emojify","style","includes","themeId","width","fontSize","height","children","ReactHtmlParser","ContentWithOutSlack","_ref","content","Personalization","customHasTagStyle","color","hashtag_color","fontWeight","backgroundColor","hashtag_background_status","hashtag_background_color","network","id","window","slackdown","_Fragment","hashtag_highlight","hashtag_feed","hashtag_all","parse","match","i","_jsxs","className","slackMember","hash","hashString","concat","memo","trim_content_length","isTagEmbed","itemData","personalization","toggleDivs","contentClass","rating","textDecorate","type","postTextContent","trimcontent","PostTrimContent","username","author","length","authorNameStyle","authorColor","isProduct","ugc_products","isShopIcon","hotspot","isHotspot","onClick","Author","authorClass","name","PostContent","item","font","contentTitle","textAlign","Rating","Network","networkClass","isDefault","iconType","DefaultNetwork","React","PureComponent","render","this","props","isDefaultIcon","icon","replace","Suspense","fallback","AuthorAvatar","errorPic","background","src","String","alt","constructor","super","state","isAuthorImagevalid","picture","GET_MEDIA_NAME","onError","e","target","Math","random","contentRef","componentDidMount","setTimeout","contentHeight","current","clientHeight","contentRefCallBack","readMore","maxLength","maxLines","isReadMore","truncateStyle","WebkitLineClamp","textAlignment","contentData","isSocialWall","isSocialEmbed","STRING_TO_URL_CONVERT","trimClasses","lineTrim","contentClasses","ref","NetworkStar","networkStyles","ThemeStar","_ref2","ThemeID","Array","map","el","index"],"sourceRoot":""}